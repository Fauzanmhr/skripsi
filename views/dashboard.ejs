<%- include('partials/header', { title: title, page: page }) %>
<div class="flex-wrapper">
  <div class="container content">
    <!-- Sentiment Cards Row -->
    <div class="row w-100 justify-content-center mt-4">
      <!-- Total Data Card -->
      <div class="col-md-2 mb-4">
        <div class="card h-100">
          <div class="card-body text-center">
            <h6 class="card-subtitle mb-2 text-muted">Total Reviews</h6>
            <h3 class="card-title" id="totalReviews">0</h3>
            <div class="progress mt-2" style="height: 4px;">
              <div class="progress-bar bg-secondary" style="width: 100%"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Sentiment Cards -->
      <% const sentimentCards = ['positif', 'negatif', 'netral', 'puas', 'kecewa']; %>
      <% sentimentCards.forEach(sentiment => { %>
        <div class="col-md-2 mb-4">
          <div class="card h-100">
            <div class="card-body text-center">
              <h6 class="card-subtitle mb-2 text-muted"><%= sentiment.charAt(0).toUpperCase() + sentiment.slice(1) %></h6>
              <h3 class="card-title" id="<%= sentiment %>Count">0</h3>
              <div class="progress mt-2" style="height: 4px;">
                <div class="progress-bar" id="<%= sentiment %>Progress" 
                     style="width: 0%; background-color: <%= colors[sentiment] %>"></div>
              </div>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
    
    <!-- Chart Row -->
    <div class="row w-100 justify-content-center">
      <div class="col-md-12 mb-4">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title mb-0">Sentiment Distribution</h5>
          </div>
          <div class="card-body text-center">
            <div class="chart-container" style="position: relative; width: 100%; height: 300px;">
              <canvas id="sentimentChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Sentiment by Time Chart -->
    <div class="row w-100 mb-4">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Sentiment Trends Over Time</h5>
            <div class="d-flex align-items-center">
              <div class="btn-group me-3" role="group" aria-label="Time period selector">
                <button type="button" class="btn btn-outline-primary active" data-period="week">Week</button>
                <button type="button" class="btn btn-outline-primary" data-period="month">Month</button>
                <button type="button" class="btn btn-outline-primary" data-period="year">Year</button>
              </div>
              <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="yearDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                  <span id="selectedYearLabel"><%= latestYear %></span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="yearDropdown" id="yearDropdownMenu">
                  <% availableYears.forEach(year => { %>
                    <li>
                      <a class="dropdown-item <%= year === latestYear ? 'active' : '' %>" href="#" data-year="<%= year %>">
                        <%= year %>
                      </a>
                    </li>
                  <% }); %>
                </ul>
              </div>
            </div>
          </div>
          <div class="card-body">
            <div class="chart-container" style="position: relative; width: 100%; height: 350px;">
              <canvas id="timeSeriesChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<%- include('./partials/footer') %>
<!-- Scripts -->
<script src="/js/chart.umd.js"></script>
<script>
  // Get data from server
  const stats = <%- JSON.stringify(stats) %>;
  const timeSeriesData = <%- JSON.stringify(timeSeriesData) %>;
  const weeklyData = <%- JSON.stringify(weeklyData) %>;
  const monthlyData = <%- JSON.stringify(monthlyData) %>;
  const yearlyData = <%- JSON.stringify(yearlyData) %>;
  const availableYears = <%- JSON.stringify(availableYears) %>;
  const latestYear = "<%= latestYear %>";

  // Color mapping for sentiment categories
  const colors = {
    'positif': 'rgba(75, 192, 192, 0.8)',  // Green
    'negatif': 'rgba(255, 99, 132, 0.8)',  // Red
    'netral': 'rgba(201, 203, 207, 0.8)',  // Gray
    'puas': 'rgba(54, 162, 235, 0.8)',     // Blue
    'kecewa': 'rgba(255, 159, 64, 0.8)'    // Orange
  };

  let timeSeriesChart;
  let currentPeriod = 'week';
  let currentYear = latestYear;

  // Create charts and update cards
  document.addEventListener('DOMContentLoaded', function() {
    const labels = stats.labels;
    const data = labels.map(label => stats.counts[label]);
    
    // Update sentiment cards
    updateSentimentCards(labels, data);
    
    // Create sentiment chart
    createSentimentChart(labels, data);
    
    // Setup year dropdown
    setupYearDropdown();
    
    // Create time series chart (default to weekly view of latest year)
    createTimeSeriesChart(labels, currentPeriod, currentYear);
    
    // Setup time period buttons
    setupTimePeriodButtons();
  });

  // Update sentiment cards with data
  function updateSentimentCards(labels, data) {
    const totalReviews = data.reduce((sum, current) => sum + current, 0);
    
    // Update total reviews card
    document.getElementById('totalReviews').textContent = totalReviews;
    
    // Update each sentiment card
    labels.forEach((label, index) => {
      const count = data[index];
      const percentage = totalReviews > 0 ? Math.round((count / totalReviews) * 100) : 0;
      
      // Update count
      document.getElementById(`${label}Count`).textContent = count;
      
      // Update progress bar
      const progressBar = document.getElementById(`${label}Progress`);
      progressBar.style.width = `${percentage}%`;
      progressBar.setAttribute('aria-valuenow', percentage);
    });
  }

  // Create sentiment distribution chart
  function createSentimentChart(labels, data) {
    const backgroundColors = labels.map(label => colors[label]);
    const ctx = document.getElementById('sentimentChart').getContext('2d');
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Number of Reviews',
          data: data,
          backgroundColor: backgroundColors,
          borderColor: backgroundColors.map(color => color.replace('0.8', '1')),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false, 
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `Reviews: ${context.raw}`;
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: { precision: 0 }
          }
        }
      }
    });
  }

  // Setup year dropdown
  function setupYearDropdown() {
    const yearDropdownItems = document.querySelectorAll('#yearDropdownMenu .dropdown-item');
    const selectedYearLabel = document.getElementById('selectedYearLabel');
    
    yearDropdownItems.forEach(item => {
      item.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Remove active class from all items
        yearDropdownItems.forEach(i => i.classList.remove('active'));
        
        // Add active class to clicked item
        this.classList.add('active');
        
        // Update selected year and label
        currentYear = this.dataset.year;
        selectedYearLabel.textContent = currentYear;
        
        // Refresh chart
        createTimeSeriesChart(stats.labels, currentPeriod, currentYear);
      });
    });
  }

  // Create time series chart
  function createTimeSeriesChart(labels, period = 'week', year = null) {
    currentPeriod = period;
    if (year) currentYear = year;
    
    // Choose the right data based on period
    let chartData;
    switch(period) {
      case 'week':
        chartData = weeklyData;
        break;
      case 'month':
        chartData = monthlyData;
        break;
      case 'year':
        chartData = yearlyData;
        break;
      default:
        chartData = weeklyData;
    }
    
    // Filter data by year if needed (for week and month views)
    if (period !== 'year' && year) {
      const filteredLabels = [];
      const filteredSeries = {};
      
      labels.forEach(sentiment => {
        filteredSeries[sentiment] = [];
      });
      
      chartData.labels.forEach((label, index) => {
        if (label.includes(year)) {
          filteredLabels.push(label);
          labels.forEach(sentiment => {
            filteredSeries[sentiment].push(chartData.series[sentiment][index]);
          });
        }
      });
      
      chartData = {
        labels: filteredLabels,
        series: filteredSeries
      };
    }
    
    const datasets = labels.map(sentiment => {
      return {
        label: sentiment.charAt(0).toUpperCase() + sentiment.slice(1),
        data: chartData.series[sentiment],
        borderColor: colors[sentiment].replace('0.8', '1'),
        backgroundColor: colors[sentiment].replace('0.8', '0.1'),
        borderWidth: 2,
        tension: 0.3,
        fill: true,
      };
    });
    
    const timeSeriesCtx = document.getElementById('timeSeriesChart').getContext('2d');
    
    // Destroy existing chart if it exists
    if (timeSeriesChart) {
      timeSeriesChart.destroy();
    }
    
    timeSeriesChart = new Chart(timeSeriesCtx, {
      type: 'line',
      data: {
        labels: chartData.labels,
        datasets: datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          mode: 'index',
          intersect: false,
        },
        plugins: {
          legend: { 
            position: 'top',
            labels: {
              usePointStyle: true,
              pointStyle: 'circle'
            }
          },
          tooltip: {
            mode: 'index',
            intersect: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            stacked: false,
            ticks: { precision: 0 }
          },
          x: {
            ticks: {
              maxRotation: 45,
              minRotation: 45
            }
          }
        }
      }
    });
  }

  // Setup time period buttons
  function setupTimePeriodButtons() {
    const buttons = document.querySelectorAll('[data-period]');
    
    buttons.forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all buttons
        buttons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to clicked button
        this.classList.add('active');
        
        // Update chart
        const period = this.getAttribute('data-period');
        createTimeSeriesChart(stats.labels, period, currentYear);
      });
    });
  }
</script>