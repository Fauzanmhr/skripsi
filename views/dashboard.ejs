<%- include('partials/header', { title: title, page: page }) %>

<div class="flex-wrapper">
  <div class="container content">
    <!-- Warning if Google Maps URL is not configured -->
    <% if (!googleMapsUrl) { %>
    <div class="alert alert-warning mt-4 mb-0" role="alert">
      <i class="bi bi-exclamation-triangle-fill me-2"></i>
      <strong>URL Google Maps belum dikonfigurasi!</strong> Silakan atur URL di halaman ulasan.
    </div>
    <% } else if (placeName) { %>
    <div class="alert alert-info mt-4 mb-0" role="alert">
      <i class="bi bi-geo-alt-fill me-2"></i>
      <strong>Lokasi:</strong> <%= placeName %>
    </div>
    <% } %>
  
    <!-- Sentiment Cards Row -->
    <div class="row justify-content-center mt-4">
      <!-- Total Data Card -->
      <div class="col-lg-2 col-md-4 col-6 mb-4">
        <div class="card h-100">
          <div class="card-body text-center">
            <h6 class="card-subtitle mb-2 text-muted">Total Ulasan</h6>
            <h3 class="card-title" id="totalReviews">0</h3>
            <div class="progress mt-2" style="height: 4px;">
              <div class="progress-bar bg-secondary" style="width: 100%"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Sentiment Cards -->
      <% const sentimentCards = ['positif', 'negatif', 'netral', 'puas', 'kecewa']; %>
      <% sentimentCards.forEach(sentiment => { %>
        <div class="col-lg-2 col-md-4 col-6 mb-4">
          <div class="card h-100">
            <div class="card-body text-center">
              <h6 class="card-subtitle mb-2 text-muted"><%= sentiment.charAt(0).toUpperCase() + sentiment.slice(1) %></h6>
              <h3 class="card-title" id="<%= sentiment %>Count">0</h3>
              <div class="progress mt-2" style="height: 4px;">
                <div class="progress-bar" id="<%= sentiment %>Progress" style="width: 0%"></div>
              </div>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
    
    <!-- All Time Chart Row -->
    <div class="row justify-content-center">
      <div class="col-md-12 mb-4">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title mb-0">Distribusi Sentimen</h5>
          </div>
          <div class="card-body text-center">
            <div class="chart-container" style="position: relative; width: 100%; height: 300px;">
              <canvas id="sentimentChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Filtered Chart Row -->
    <div class="row justify-content-center">
      <div class="col-md-12 mb-4">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center flex-wrap">
            <h5 class="card-title mb-0">Distribusi Sentimen Periode</h5>
            <div class="filter-controls d-flex gap-2">
              <form id="filterForm" class="d-flex gap-2" method="get">
                <select name="month" id="monthFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                  <% filters.months.forEach(month => { %>
                    <option value="<%= month.value %>" <%= month.value === filters.selectedMonth ? 'selected' : '' %>><%= month.name %></option>
                  <% }); %>
                </select>
                <select name="year" id="yearFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                  <% filters.years.forEach(year => { %>
                    <option value="<%= year %>" <%= year === filters.selectedYear ? 'selected' : '' %>><%= year %></option>
                  <% }); %>
                </select>
              </form>
            </div>
          </div>
          <div class="card-body text-center">
            <div class="chart-container" style="position: relative; width: 100%; height: 300px;">
              <canvas id="filteredSentimentChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('./partials/footer') %>

<!-- Scripts -->
<script src="/js/chart.umd.js"></script>
<script>
  const Dashboard = {
    config: {
      stats: <%- JSON.stringify(stats) %>,
      filters: <%- JSON.stringify(filters) %>,
      colors: {
        'positif': 'rgba(46, 125, 50, 0.8)',
        'negatif': 'rgba(183, 28, 28, 0.8)',
        'netral': 'rgba(66, 66, 66, 0.8)',
        'puas': 'rgba(13, 71, 161, 0.8)',
        'kecewa': 'rgba(230, 81, 0, 0.8)'
      },
      monthNames: [
        'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni',
        'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
      ]
    },
    
    init: function() {
      const labels = this.config.stats.labels;
      const allTimeData = labels.map(label => this.config.stats.allTimeCounts[label]);
      const filteredData = labels.map(label => this.config.stats.counts[label]);
      
      this.setupUIElements();
      this.updateSentimentCards(labels, allTimeData);
      this.createAllTimeChart(labels, allTimeData);
      this.createFilteredChart(labels, filteredData);
    },
    
    setupUIElements: function() {
      this.applyProgressBarColors();
      document.querySelectorAll('canvas').forEach(canvas => {
        canvas.style.cursor = 'pointer';
      });
    },
    
    applyProgressBarColors: function() {
      Object.keys(this.config.colors).forEach(sentiment => {
        const progressBar = document.getElementById(`${sentiment}Progress`);
        if (progressBar) {
          progressBar.style.backgroundColor = this.config.colors[sentiment];
        }
      });
    },
    
    getMonthName: function(monthNum) {
      return this.config.monthNames[monthNum - 1];
    },
    
    updateSentimentCards: function(labels, data) {
      const totalReviews = data.reduce((sum, current) => sum + current, 0);
      
      document.getElementById('totalReviews').textContent = totalReviews;
      
      labels.forEach((label, index) => {
        const count = data[index];
        const percentage = totalReviews > 0 ? Math.round((count / totalReviews) * 100) : 0;
        
        document.getElementById(`${label}Count`).textContent = count;
        
        const progressBar = document.getElementById(`${label}Progress`);
        progressBar.style.width = `${percentage}%`;
        progressBar.setAttribute('aria-valuenow', percentage);
      });
    },
    
    createAllTimeChart: function(labels, data) {
      this.createSentimentChart(labels, data, 'sentimentChart', 'Semua Waktu', 'bar');
    },
    
    createFilteredChart: function(labels, data) {
      const periodLabel = `${this.getMonthName(this.config.filters.selectedMonth)} ${this.config.filters.selectedYear}`;
      this.createSentimentChart(labels, data, 'filteredSentimentChart', periodLabel, 'pie');
    },
    
    handleChartClick: function(chartId, sentiment) {
      if (chartId === 'filteredSentimentChart') {
        const { selectedYear, selectedMonth } = this.config.filters;
        const firstDay = `${selectedYear}-${String(selectedMonth).padStart(2, '0')}-01`;
        const lastDayDate = new Date(selectedYear, selectedMonth, 0);
        const lastDay = `${selectedYear}-${String(selectedMonth).padStart(2, '0')}-${String(lastDayDate.getDate()).padStart(2, '0')}`;
        
        window.location.href = `/reviews?sentiment=${sentiment}&startDate=${firstDay}&endDate=${lastDay}`;
      } else {
        window.location.href = `/reviews?sentiment=${sentiment}`;
      }
    },
    
    createSentimentChart: function(labels, data, chartId, periodLabel, chartType) {
      const ctx = document.getElementById(chartId).getContext('2d');
      const backgroundColors = labels.map(label => this.config.colors[label]);
      const self = this;
      
      const datasets = chartType === 'pie' ? 
        [{
          label: 'Jumlah Ulasan',
          data: data,
          backgroundColor: backgroundColors,
          borderColor: backgroundColors.map(color => color.replace('0.8', '1')),
          borderWidth: 1,
          hoverOffset: 15
        }] : 
        labels.map((label, index) => ({
          label: label.charAt(0).toUpperCase() + label.slice(1),
          data: [data[index]],
          backgroundColor: backgroundColors[index],
          borderColor: backgroundColors[index].replace('0.8', '1'),
          borderWidth: 1,
          barPercentage: 0.7,
          categoryPercentage: 0.9
        }));
      
      new Chart(ctx, {
        type: chartType,
        data: {
          labels: chartType === 'pie' ? 
            labels.map(label => label.charAt(0).toUpperCase() + label.slice(1)) : 
            [''],
          datasets: datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          animation: {
            animateRotate: true,
            animateScale: true
          },
          onClick: (event, elements) => {
            if (elements.length > 0) {
              let sentiment;
              
              if (chartType === 'pie') {
                const index = elements[0].index;
                sentiment = labels[index];
              } else {
                const datasetIndex = elements[0].datasetIndex;
                sentiment = labels[datasetIndex];
              }
              
              self.handleChartClick(chartId, sentiment);
            }
          },
          plugins: {
            title: {
              // Always display the title
              display: true,
              text: `Analisis Sentimen ${periodLabel}`,
              font: {
                size: 16,
                weight: 'bold'
              }
            },
            legend: { 
              display: true,
              position: 'bottom',
              labels: {
                boxWidth: 12,
                padding: 15,
                font: {
                  size: 12
                }
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let total;
                  if (chartType === 'pie') {
                    total = context.chart.data.datasets[0].data.reduce((sum, val) => sum + val, 0);
                  } else {
                    total = data.reduce((sum, val) => sum + val, 0);
                  }
                  
                  const percentage = total > 0 ? Math.round((context.raw / total) * 100) : 0;
                  return `${context.raw} ulasan (${percentage}%)`;
                },
                title: function(context) {
                  return context[0].label;
                }
              }
            }
          },
          scales: chartType === 'bar' ? {
            y: {
              beginAtZero: true,
              ticks: { precision: 0 }
            }
          } : undefined
        }
      });
    }
  };
  
  document.addEventListener('DOMContentLoaded', function() {
    Dashboard.init();
  });
</script>