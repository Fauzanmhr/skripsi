<%- include('partials/header', { title: title, page: page }) %>

<div class="flex-wrapper">
  <div class="container content">
    <!-- Sentiment Cards Row -->
    <div class="row justify-content-center mt-4">
      <!-- Total Data Card -->
      <div class="col-xl-2 col-lg-2 col-md-4 col-sm-6 col-12 mb-4">
        <div class="card h-100">
          <div class="card-body text-center">
            <h6 class="card-subtitle mb-2 text-muted">Total Reviews</h6>
            <h3 class="card-title" id="totalReviews">0</h3>
            <div class="progress mt-2" style="height: 4px;">
              <div class="progress-bar bg-secondary" style="width: 100%"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Sentiment Cards -->
      <% const sentimentCards = ['positif', 'negatif', 'netral', 'puas', 'kecewa']; %>
      <% sentimentCards.forEach(sentiment => { %>
        <div class="col-xl-2 col-lg-2 col-md-4 col-sm-6 col-12 mb-4">
          <div class="card h-100">
            <div class="card-body text-center">
              <h6 class="card-subtitle mb-2 text-muted"><%= sentiment.charAt(0).toUpperCase() + sentiment.slice(1) %></h6>
              <h3 class="card-title" id="<%= sentiment %>Count">0</h3>
              <div class="progress mt-2" style="height: 4px;">
                <div class="progress-bar" id="<%= sentiment %>Progress" style="width: 0%"></div>
              </div>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
    
    <!-- All Time Chart Row -->
    <div class="row w-100 justify-content-center">
      <div class="col-md-12 mb-4">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title mb-0">All Time Sentiment Distribution</h5>
          </div>
          <div class="card-body text-center">
            <div class="chart-container" style="position: relative; width: 100%; height: 300px;">
              <canvas id="sentimentChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Filtered Chart Row -->
    <div class="row w-100 justify-content-center">
      <div class="col-md-12 mb-4">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center flex-wrap">
            <h5 class="card-title mb-0">Period Sentiment Distribution</h5>
            <div class="filter-controls d-flex gap-2">
              <form id="filterForm" class="d-flex gap-2" method="get">
                <select name="month" id="monthFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                  <% filters.months.forEach(month => { %>
                    <option value="<%= month.value %>" <%= month.value === filters.selectedMonth ? 'selected' : '' %>><%= month.name %></option>
                  <% }); %>
                </select>
                <select name="year" id="yearFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                  <% filters.years.forEach(year => { %>
                    <option value="<%= year %>" <%= year === filters.selectedYear ? 'selected' : '' %>><%= year %></option>
                  <% }); %>
                </select>
              </form>
            </div>
          </div>
          <div class="card-body text-center">
            <div class="chart-container" style="position: relative; width: 100%; height: 300px;">
              <canvas id="filteredSentimentChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('./partials/footer') %>

<!-- Scripts -->
<script src="/js/chart.umd.js"></script>
<script>
  // Get data from server
  const stats = <%- JSON.stringify(stats) %>;
  const filters = <%- JSON.stringify(filters) %>;
  
  // color mapping
  const colors = {
    'positif': 'rgba(46, 125, 50, 0.8)',    // Dark green - high contrast, WCAG AA compliant
    'negatif': 'rgba(183, 28, 28, 0.8)',    // Dark red - high contrast, WCAG AA compliant
    'netral': 'rgba(66, 66, 66, 0.8)',      // Dark gray - high contrast, WCAG AA compliant
    'puas': 'rgba(13, 71, 161, 0.8)',       // Dark blue - high contrast, WCAG AA compliant
    'kecewa': 'rgba(230, 81, 0, 0.8)'       // Dark orange - high contrast, WCAG AA compliant
  };
  
  // Create charts and update cards
  document.addEventListener('DOMContentLoaded', function() {
    const labels = stats.labels;
    const data = labels.map(label => stats.allTimeCounts[label]);
    const filteredData = labels.map(label => stats.counts[label]);
    
    // Apply colors to progress bars
    applyProgressBarColors();
    
    // Update sentiment cards - use all-time data for cards
    updateSentimentCards(labels, data);
    
    // Create all time sentiment chart
    createSentimentChart(labels, data, 'sentimentChart', 'All Time');
    
    // Create filtered sentiment chart
    createSentimentChart(
      labels, 
      filteredData, 
      'filteredSentimentChart', 
      `${getMonthName(filters.selectedMonth)} ${filters.selectedYear}`
    );
    
    // Add pointer cursor to charts to indicate they're clickable
    document.querySelectorAll('canvas').forEach(canvas => {
      canvas.style.cursor = 'pointer';
    });
  });
  
  function getMonthName(monthNum) {
    const months = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return months[monthNum - 1];
  }
  
  // Apply colors to progress bars
  function applyProgressBarColors() {
    const sentimentCards = ['positif', 'negatif', 'netral', 'puas', 'kecewa'];
    sentimentCards.forEach(sentiment => {
      const progressBar = document.getElementById(`${sentiment}Progress`);
      if (progressBar) {
        progressBar.style.backgroundColor = colors[sentiment];
      }
    });
  }
  
  // Update sentiment cards with data
  function updateSentimentCards(labels, data) {
    const totalReviews = data.reduce((sum, current) => sum + current, 0);
    
    // Update total reviews card
    document.getElementById('totalReviews').textContent = totalReviews;
    
    // Update each sentiment card
    labels.forEach((label, index) => {
      const count = data[index];
      const percentage = totalReviews > 0 ? Math.round((count / totalReviews) * 100) : 0;
      
      // Update count
      document.getElementById(`${label}Count`).textContent = count;
      
      // Update progress bar
      const progressBar = document.getElementById(`${label}Progress`);
      progressBar.style.width = `${percentage}%`;
      progressBar.setAttribute('aria-valuenow', percentage);
    });
  }
  
  // Create sentiment distribution chart
  function createSentimentChart(labels, data, chartId, periodLabel) {
    const backgroundColors = labels.map(label => colors[label]);
    const ctx = document.getElementById(chartId).getContext('2d');
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Number of Reviews',
          data: data,
          backgroundColor: backgroundColors,
          borderColor: backgroundColors.map(color => color.replace('0.8', '1')),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        onClick: (event, elements) => {
          if (elements.length > 0) {
            const index = elements[0].index;
            const sentiment = labels[index];
            // For filtered chart, include date range in the URL
            if (chartId === 'filteredSentimentChart') {
              // Properly calculate first and last day of month, accounting for timezone issues
              
              // Create first day of month: YYYY-MM-01
              const firstDay = `${filters.selectedYear}-${String(filters.selectedMonth).padStart(2, '0')}-01`;
              
              // Calculate last day of month correctly
              // Using the fact that day 0 of next month is the last day of current month
              const lastDayDate = new Date(filters.selectedYear, filters.selectedMonth, 0);
              const lastDay = `${filters.selectedYear}-${String(filters.selectedMonth).padStart(2, '0')}-${String(lastDayDate.getDate()).padStart(2, '0')}`;
              
              window.location.href = `/reviews?sentiment=${sentiment}&startDate=${firstDay}&endDate=${lastDay}`;
            } else {
              // For all-time chart, just filter by sentiment
              window.location.href = `/reviews?sentiment=${sentiment}`;
            }
          }
        },
        plugins: {
          title: {
            display: true,
            text: `Sentiment Distribution - ${periodLabel}`
          },
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `Reviews: ${context.raw}`;
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: { precision: 0 }
          }
        }
      }
    });
  }
</script>