<%- include('partials/header', { title: title, page: page }) %>
<%- include('partials/navbar') %>
<div class="flex-wrapper">

  <!-- Modal untuk pengaturan scrape otomatis -->
  <div class="modal fade" id="autoScrapeModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Pengaturan Scrape Otomatis</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
        </div>
        <div class="modal-body">
          <form id="autoScrapeForm" class="row g-3">
            <div class="col-12">
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="autoScrapeEnabled" name="enabled">
                <label class="form-check-label" for="autoScrapeEnabled">Aktifkan Scrape Otomatis</label>
              </div>
            </div>

            <div class="col-12">
              <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                Jika diaktifkan, ulasan akan otomatis diambil setiap hari tengah malam.
              </div>
            </div>

            <div class="col-12">
              <label for="nextScrape" class="form-label">Scrape Terjadwal Berikutnya</label>
              <input type="text" class="form-control" id="nextScrape" readonly disabled>
            </div>


            <div class="col-12 mt-3 border-top pt-3">
              <h6 class="mb-2">Informasi Scrape Otomatis Terakhir</h6>
              <div id="lastAutoScrapeInfo" class="small text-muted">
                <span class="placeholder-glow"><span class="placeholder col-6"></span></span>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
          <button type="button" id="saveAutoScrape" class="btn btn-primary">
            <span class="spinner-border spinner-border-sm d-none" id="autoScrapeSpinner"></span>
            Simpan Pengaturan
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal untuk konfigurasi URL Google Maps -->
  <div class="modal fade" id="googleMapsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Pengaturan URL Google Maps</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
        </div>
        <div class="modal-body">
          <form id="googleMapsForm" class="row g-3">
            <div class="col-12">
              <label for="google_maps_url" class="form-label">Google Maps</label>
              <div class="input-group">
                <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                <input type="url" class="form-control" id="google_maps_url" name="google_maps_url" value="<%= googleMapsUrl %>" required>
              </div>
              <div class="form-text">
                URL Google Maps untuk pengambilan ulasan. Harus berupa halaman lokasi Google Maps dengan tab ulasan terbuka.
              </div>
            </div>

            <div class="col-12 mt-2">
              <details>
                <summary class="text-primary small cursor-pointer">Bagaimana cara mendapatkan URL yang valid?</summary>
                <div class="mt-2 small">
                  <ol>
                    <li>Buka Google Maps dan cari tempat yang ingin Anda pantau</li>
                    <li>Klik tab "Ulasan"</li>
                    <li>Salin URL dari address bar browser Anda</li>
                  </ol>
                  <p>URL yang valid biasanya terlihat seperti ini:</p>
                  <code class="bg-light d-block p-2 small text-break">https://www.google.com/maps/place/de.u+Coffee/.../@-6.8959,107.616,15z/...!1b1!...</code>
                  <p class="mt-2">Pastikan URL mengandung <code>/place/</code> dan juga <code>!1b1</code> yang menandakan tab ulasan sudah terbuka.</p>
                </div>
              </details>
            </div>

            <div class="col-12 mt-3">
              <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong>Perhatian:</strong> Mengubah URL Google Maps akan menghapus SEMUA data ulasan yang ada.
                Pastikan Anda yakin sebelum menyimpan perubahan.
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
          <button type="button" id="saveGoogleMapsUrl" class="btn btn-primary">
            <span class="spinner-border spinner-border-sm d-none me-2" id="googleMapsSpinner"></span>
            Simpan Pengaturan
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal loading untuk menampilkan status proses -->
  <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body text-center py-4">
          <div id="loadingState">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
              <span class="visually-hidden">Memuat...</span>
            </div>
            <h5 class="mt-3">Memproses file Anda...</h5>
            <p>Harap tunggu selagi kami menganalisis ulasan.</p>
            <div class="progress mt-3" style="height: 6px;">
              <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
            </div>
          </div>
          <div id="errorState" class="d-none">
            <div class="alert alert-danger" id="errorAlert" role="alert"></div>
            <button class="btn btn-primary mt-3" id="closeModalButton" data-bs-dismiss="modal">Tutup</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal untuk analisis file berisi ulasan eksternal -->
  <div class="modal fade" id="fileAnalyzerModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Analisis Sentimen File Eksternal</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
        </div>
        <div class="modal-body" id="fileAnalyzerModalBody">
          <form id="uploadForm" enctype="multipart/form-data">

            <div id="fileAnalyzerAlert" class="d-none mb-3"></div>

            <div class="mb-3">
              <h6>Instruksi Analisis File</h6>
              <p>Fitur ini memungkinkan Anda untuk menganalisis sentimen dari ulasan yang disimpan dalam file eksternal (berbeda dari ulasan Google Maps).</p>
              <div class="alert alert-info py-2">
                <div class="d-flex align-items-center">
                  <i class="bi bi-info-circle me-2"></i>
                  <small>Format yang didukung: CSV (.csv), Excel (.xlsx)</small>
                </div>
              </div>
              <div class="alert alert-warning py-2">
                <div class="d-flex align-items-center">
                  <i class="bi bi-exclamation-triangle me-2"></i>
                  <small><strong>Perhatian:</strong> File yang dianalisis tidak akan tersimpan di database. Hasil analisis akan tersedia untuk diunduh.</small>
                </div>
              </div>
            </div>

            <div class="mb-3">
              <label for="fileInput" class="form-label">Pilih File Ulasan <span class="text-danger">*</span></label>
              <input class="form-control" type="file" id="fileInput" name="file" accept=".csv,.xlsx" required>
              <div class="invalid-feedback">
                Silakan pilih file terlebih dahulu
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
          <button type="button" id="uploadButton" class="btn btn-primary">
            <i class="bi bi-cloud-arrow-up me-1"></i>
            <span class="spinner-border spinner-border-sm d-none me-2" id="uploadSpinner"></span>
            Unggah dan Pratinjau
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Konten utama halaman ulasan -->
  <div class="container content">
    <!-- Area informasi dan tombol aksi -->
    <div class="mt-4 mb-4">
      <!-- Baris pertama dengan tombol aksi -->
      <div class="row mb-3">
        <div class="col-12">
          <div class="d-flex flex-column flex-md-row-reverse gap-3">

            <!-- Card untuk tombol aksi scraping -->
            <div class="card shadow-sm mb-2 mb-md-0">
              <div class="card-header bg-secondary bg-opacity-10 py-2">
                <h6 class="mb-0 text-secondary">
                  <i class="bi bi-geo-alt me-2"></i>
                  <span>Google Maps</span>
                </h6>
              </div>
              <div class="card-body p-2">
                <div class="d-flex flex-column d-md-flex flex-md-row gap-2">
                  <button id="googleMapsButton" class="btn btn-outline-secondary btn-sm d-flex align-items-center justify-content-center">
                    <i class="bi bi-gear me-md-2"></i>
                    <span class="d-none d-md-inline">Pengaturan URL</span>
                    <span class="d-inline d-md-none">URL</span>
                  </button>
                  <button id="autoScrapeButton" class="btn btn-outline-primary btn-sm d-flex align-items-center justify-content-center">
                    <i class="bi bi-clock-history me-md-2"></i>
                    <span id="autoScrapeStatus" class="d-none d-md-inline">Scrape Otomatis</span>
                    <span class="d-inline d-md-none">Auto</span>
                  </button>
                  <button id="crawlButton" class="btn btn-primary btn-sm d-flex align-items-center justify-content-center">
                    <span class="spinner-border spinner-border-sm me-md-2 d-none" role="status" aria-hidden="true" id="crawlSpinner"></span>
                    <span id="crawlButtonText" class="d-none d-md-inline">Scrape Ulasan</span>
                    <span class="d-inline d-md-none">Scrape</span>
                  </button>
                </div>
              </div>
            </div>


            <!-- Card untuk tombol aksi pengaturan -->
            <div class="card shadow-sm mb-2 mb-md-0">
              <div class="card-header bg-info bg-opacity-10 py-2">
                <h6 class="mb-0 text-info">
                  <i class="bi bi-file-earmark-text me-2"></i>
                  <span>File Eksternal</span>
                </h6>
              </div>
              <div class="card-body p-2">
                <div class="d-flex flex-column gap-2">
                  <button id="fileAnalyzerButton" class="btn btn-outline-info btn-sm d-flex align-items-center justify-content-center">
                    <i class="bi bi-search me-md-2"></i>
                    <span class="d-none d-md-inline">Analisis File Eksternal</span>
                    <span class="d-inline d-md-none">Analisis</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>


      <!-- Peringatan jika URL Google Maps belum dikonfigurasi -->
      <% if (!googleMapsUrl) { %>
      <div class="alert alert-warning mb-4" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        <strong>URL Google Maps belum dikonfigurasi!</strong> Silakan atur URL di tombol Pengaturan Google Maps.
      </div>
      <% } %>


      <!-- Informasi status scraping terakhir -->
      <div id="lastScrapeInfoRow" class="d-flex flex-wrap justify-content-start align-items-center gap-3 small text-muted pt-2" style="min-height: 2.5em;">
      </div>

    </div>

    <!-- Card utama yang menampilkan daftar ulasan -->
    <div class="card shadow-sm mb-5">
      <!-- Header dengan judul dan nama lokasi -->
      <div class="card-header py-3 d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
          <h5 class="mb-0">Daftar Ulasan</h5>
          <% if (placeName) { %>
          <span class="badge bg-primary ms-2">
            <i class="bi bi-geo-alt-fill me-1"></i> <%= placeName %>
          </span>
          <% } %>
        </div>
      </div>

      <!-- Area filter untuk ulasan -->
      <div class="card-header bg-light py-3">
        <form id="filterForm" class="row g-2 align-items-center justify-content-center" method="GET">
          <input type="hidden" name="page" value="1">
          <div class="col-12 col-sm-auto">
            <div class="input-group input-group-sm">
              <span class="input-group-text">Sentimen</span>
              <select name="sentiment" class="form-select" aria-label="Filter berdasarkan sentimen">
                <option value="">Semua Sentimen</option>
                <% filterOptions.sentiments.forEach(sentiment => { %>
                <option value="<%= sentiment %>" <%= filters.sentiment === sentiment ? 'selected' : '' %>><%= sentiment %></option>
                <% }); %>
                <option value="pending" <%= filters.sentiment === 'pending' ? 'selected' : '' %>>Sedang Diproses</option>
              </select>
            </div>
          </div>
          <div class="col-12 col-sm-auto">
            <div class="input-group input-group-sm">
              <span class="input-group-text">Dari</span>
              <input type="date" name="startDate" class="form-control" value="<%= filters.startDate || '' %>" aria-label="Tanggal mulai">
            </div>
          </div>
          <div class="col-12 col-sm-auto">
            <div class="input-group input-group-sm">
              <span class="input-group-text">Hingga</span>
              <input type="date" name="endDate" class="form-control" value="<%= filters.endDate || '' %>" aria-label="Tanggal akhir">
            </div>
          </div>
          <% if (filters.sentiment || filters.startDate || filters.endDate) { %>
          <div class="col-auto">
            <a href="/reviews" class="btn btn-sm btn-secondary">Reset</a>
          </div>
          <% } %>
          <div class="col-12 col-sm-auto">
            <button id="exportButton" class="btn btn-sm btn-success d-flex align-items-center">
              <i class="bi bi-file-earmark-excel me-2"></i>
              <span class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true" id="exportSpinner"></span>
              Ekspor
            </button>
          </div>
        </form>
      </div>

      <!-- Konten utama dengan tabel ulasan -->
      <div class="card-body p-4">
        <!-- Tabel responsif dengan scroll untuk ulasan -->
        <div class="table-responsive" style="height: 500px; overflow-y: auto;">
          <table class="table table-hover text-center table-striped">
            <thead class="table-light sticky-top">
              <tr>
                <th><i class="bi bi-calendar me-2"></i>Tanggal</th>
                <th class="text-start w-50"><i class="bi bi-chat-square-text me-2"></i>Ulasan</th>
                <th><i class="bi bi-search me-2"></i>Sentimen</th>
              </tr>
            </thead>
            <tbody>
              <% if (reviews.length === 0) { %>
              <tr>
                <td colspan="3" class="text-center text-muted">Tidak ada ulasan ditemukan</td>
              </tr>
              <% } else { %>
              <% reviews.forEach(review => { %>
              <tr>
                <td><%= new Date(review.time_published).toLocaleDateString('id-ID') %></td>
                <td class="text-start text-wrap"><%= review.review %></td>
                <td>
                  <% if (!review.sentiment) { %>
                  <span class="badge rounded-pill bg-warning text-dark">Sedang Diproses</span>
                  <% } else { %>
                  <span class="badge rounded-pill" id="badge-<%= review.id %>"><%= review.sentiment %></span>
                  <% } %>
                </td>
              </tr>
              <% }); %>
              <% } %>
            </tbody>
          </table>
        </div>

        <!-- Navigasi pagination -->
        <% if (pagination.totalPages > 1) { %>
        <nav class="mt-4">
          <ul class="pagination flex-wrap justify-content-center">
            <li class="page-item <%= pagination.page === 1 ? 'disabled' : '' %>">
              <a class="page-link" href="<%= getPageUrl(pagination.page - 1) %>">&laquo;</a>
            </li>
            <% for (let i = 1; i <= pagination.totalPages; i++) { %>
            <% if (i === 1 || i === pagination.totalPages || (i >= pagination.page - 2 && i <= pagination.page + 2)) { %>
            <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
              <a class="page-link" href="<%= getPageUrl(i) %>"><%= i %></a>
            </li>
            <% } else if (i === 2 || i === pagination.totalPages - 1) { %>
            <li class="page-item disabled">
              <a class="page-link">...</a>
            </li>
            <% } %>
            <% } %>
            <li class="page-item <%= pagination.page === pagination.totalPages ? 'disabled' : '' %>">
              <a class="page-link" href="<%= getPageUrl(pagination.page + 1) %>">&raquo;</a>
            </li>
          </ul>
        </nav>
        <% } %>

        <!-- Informasi jumlah data yang ditampilkan -->
        <p class="text-center mt-3 text-muted">
          Menampilkan <%= (pagination.page - 1) * pagination.limit + 1 %> -
          <%= Math.min(pagination.page * pagination.limit, pagination.totalCount) %>
          dari <%= pagination.totalCount %> ulasan
          <% if (filters.sentiment === 'pending' || (filters.sentiment && filters.sentiment !== 'pending') || filters.startDate || filters.endDate) { %>
          (Difilter:
          <% if (filters.sentiment === 'pending') { %>Sedang Diproses<% } else if (filters.sentiment) { %>Sentimen: <%= filters.sentiment %><% } %>
          <% if ((filters.sentiment === 'pending' || (filters.sentiment && filters.sentiment !== 'pending')) && (filters.startDate || filters.endDate)) { %>, <% } %>
          <% if (filters.startDate || filters.endDate) { %>Tanggal: <%= filters.startDate ? new Date(filters.startDate).toLocaleDateString('id-ID') : 'Kapan saja' %> hingga <%= filters.endDate ? new Date(filters.endDate).toLocaleDateString('id-ID') : 'Terbaru' %><% } %>)
          <% } %>
        </p>
      </div>
    </div>
  </div>
</div>

<%- include('./partials/footer') %>

<!-- Script -->
<script src="/socket.io/socket.io.js"></script>
<script>
  // Inisialisasi koneksi socket io
  const socket = io();

  // Konfigurasi warna badge untuk setiap sentimen
  const badgeColors = {
    'netral':  '#757575',
    'positif': '#558B2F',
    'puas':    '#1B5E20',
    'negatif': '#D84315',
    'kecewa':  '#B71C1C'
};

  // Data status scraping terakhir dari server
  const initialLatestScrapeStatus = <%- JSON.stringify(latestScrapeStatus || null) %>;

  // Inisialisasi saat dokumen dimuat
  document.addEventListener('DOMContentLoaded', function() {
    // Terapkan warna untuk badge sentimen
    applySentimentBadgeColors();

    // Siapkan tombol scraping
    setupCrawlButton();

    // Siapkan handler filter
    setupFilterHandlers();

    // Siapkan tombol ekspor
    setupExportButton();

    // Siapkan pengaturan scrape otomatis
    setupAutoScrape();

    // Siapkan pengaturan Google Maps
    setupGoogleMapsSettings();

    // Siapkan fitur analisis file
    setupFileAnalyzer();

    // Setup tombol konfigurasi Google Maps
    const configureBtn = document.getElementById('configureGoogleMapsBtn');
    if (configureBtn) {
      configureBtn.addEventListener('click', function() {
        const googleMapsModal = new bootstrap.Modal(document.getElementById('googleMapsModal'));
        googleMapsModal.show();
      });
    }

    // Update UI dengan status scraping terakhir
    updateScrapeStatusRow(initialLatestScrapeStatus);
    updateCrawlButtonState(initialLatestScrapeStatus);

    // Listen socket io untuk update status scraping secara real-time
    socket.on('scrapeStatusUpdate', function(statusData) {
      updateScrapeStatusRow(statusData);
      updateCrawlButtonState(statusData);
    });
  });

  // Fungsi untuk menerapkan warna pada badge sentimen
  function applySentimentBadgeColors() {
    document.querySelectorAll('.badge').forEach(badge => {
      const sentiment = badge.textContent.trim().toLowerCase();
      if (badgeColors[sentiment]) {
        badge.style.backgroundColor = badgeColors[sentiment];
      }
    });
  }

  // Setup tombol crawl untuk memulai scraping
  function setupCrawlButton() {
    document.getElementById('crawlButton').addEventListener('click', async function() {
      const googleMapsUrl = "<%= googleMapsUrl %>";
      if (!googleMapsUrl) {
        const shouldConfigure = confirm("URL Google Maps belum dikonfigurasi. Apakah Anda ingin mengkonfigurasinya sekarang?");
        if (shouldConfigure) {
          const googleMapsModal = new bootstrap.Modal(document.getElementById('googleMapsModal'));
          googleMapsModal.show();
        }
        return;
      }

      await performCrawl(this, 'crawlSpinner', 'crawlButtonText', '/reviews/crawl');
    });
  }

  // Setup tombol ekspor untuk mengunduh data ulasan
  function setupExportButton() {
    document.getElementById('exportButton').addEventListener('click', async function() {
      const spinner = document.getElementById('exportSpinner');
      const button = this;

      try {
        button.disabled = true;
        spinner.classList.remove('d-none');

        const currentFilters = new URLSearchParams(new FormData(document.getElementById('filterForm'))).toString();

        window.location.href = `/reviews/export?${currentFilters}`;

      } catch (error) {
        console.error('Export failed:', error);
        alert('Ekspor gagal. Silakan coba lagi.');
      } finally {
        setTimeout(() => {
          button.disabled = false;
          spinner.classList.add('d-none');
        }, 1000);
      }
    });
  }

  // Setup handler untuk filter ulasan
  function setupFilterHandlers() {
    const filterSelects = document.querySelectorAll('#filterForm select');
    const filterDates = document.querySelectorAll('#filterForm input[type="date"]');

    filterSelects.forEach(select => {
      select.addEventListener('change', function() {
        document.getElementById('filterForm').submit();
      });
    });

    filterDates.forEach(dateInput => {
      dateInput.addEventListener('change', function() {
        document.getElementById('filterForm').submit();
      });
    });
  }

  // Fungsi untuk melakukan proses crawling/scraping
  async function performCrawl(button, spinnerId, buttonTextId, endpoint) {
    const spinner = document.getElementById(spinnerId);
    const buttonText = document.getElementById(buttonTextId);

    button.disabled = true;
    spinner.classList.remove('d-none');
    buttonText.textContent = 'Sedang Scrape...';

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      let result;
      try {
        result = await response.json();
      } catch (parseError) {
        console.error("Error parsing JSON response:", parseError);
        return;
      }

      if (response.ok) {
        console.log("Crawl request successful:", result.message);
      } else {
        console.error("Scrape request failed:", result.message || 'Unknown error');
      }
    } catch (error) {
      console.error('Crawl operation fetch failed:', error);
    }
  }

  // Update informasi status scraping di UI
  function updateScrapeStatusRow(statusData) {
    const row = document.getElementById('lastScrapeInfoRow');
    if (!row) return;
    if (!statusData) {
      row.innerHTML = `
        <span>
          <i class="bi bi-info-circle me-1"></i>
          <strong>Scrape Terakhir:</strong> Belum ada data.
        </span>`;
      return;
    }

    let content = `
      <span>
        <i class="bi bi-info-circle me-1"></i>
        <strong>Scrape ${statusData.status === 'running' ? 'Sedang Berjalan' : 'Terakhir'}:</strong>
      </span>`;

    if (statusData.startTime) {
      content += `
        <span>
          <i class="bi bi-calendar-play me-1"></i>
          ${new Date(statusData.startTime).toLocaleString('id-ID', { dateStyle: 'short', timeStyle: 'short' })}
        </span>`;
    }

    content += `
      <span>
        <i class="bi bi-${statusData.type === 'auto' ? 'robot' : 'person'} me-1"></i>
        ${statusData.type === 'auto' ? 'Otomatis' : 'Manual'}
      </span>`;

    let statusIcon = 'question-circle';
    let statusText = 'Unknown';
    let statusColorClass = 'text-muted';

    switch (statusData.status) {
      case 'running':
        statusIcon = 'hourglass-split';
        statusText = 'Sedang Berjalan...';
        statusColorClass = 'text-primary';
        break;
      case 'completed':
        statusIcon = 'check-circle-fill';
        statusText = 'Selesai';
        statusColorClass = 'text-success';
        break;
      case 'failed':
        statusIcon = 'x-circle-fill';
        statusText = 'Gagal';
        statusColorClass = 'text-danger';
        break;
    }

    content += `
      <span class="${statusColorClass}">
        <i class="bi bi-${statusIcon} me-1"></i>
        ${statusText}
      </span>`;

    if (statusData.message) {
      if (statusData.status === 'completed') {
        const countsMatch = statusData.message.match(/Baru disimpan: (\d+), Diperbarui: (\d+), Tidak berubah: (\d+), Error: (\d+)/);
        if (countsMatch) {
          content += `<span>(Disimpan: ${countsMatch[1]}, Diperbarui: ${countsMatch[2]}, Tidak berubah: ${countsMatch[3]}, Error: ${countsMatch[4]})</span>`;
        } else {
          content += `<span>(${statusData.message})</span>`;
        }
      } else if (statusData.status === 'failed') {
        content += `<span class="text-danger">(${statusData.message})</span>`;
      }
    }

    row.innerHTML = content;
  }

  // Update status tombol crawl berdasarkan status scraping
  function updateCrawlButtonState(statusData) {
    const button = document.getElementById('crawlButton');
    const spinner = document.getElementById('crawlSpinner');
    const buttonText = document.getElementById('crawlButtonText');
    if (!button || !spinner || !buttonText) return;

    const isAnyScrapeRunning = statusData && statusData.status === 'running';

    if (isAnyScrapeRunning) {
      button.disabled = true;
      spinner.classList.remove('d-none');
      buttonText.textContent = 'Sedang Scrape...';
    } else {
      button.disabled = false;
      spinner.classList.add('d-none');
      buttonText.textContent = 'Scrape Ulasan';
    }
  }

  // Setup modal pengaturan scrape otomatis
  function setupAutoScrape() {
    document.getElementById('autoScrapeButton').addEventListener('click', async function() {
      const lastAutoScrapeInfoDiv = document.getElementById('lastAutoScrapeInfo');
      lastAutoScrapeInfoDiv.innerHTML = '<span class="placeholder-glow"><span class="placeholder col-6"></span></span>';

      try {
        const response = await fetch('/reviews/auto-scrape-settings');
        let settings;
        try {
          settings = await response.json();
        } catch (parseError) {
          console.error("Failed to parse auto scrape settings JSON:", parseError);
          lastAutoScrapeInfoDiv.innerHTML = 'Informasi tidak tersedia.';
          const autoScrapeModal = new bootstrap.Modal(document.getElementById('autoScrapeModal'));
          autoScrapeModal.show();
          return;
        }

        document.getElementById('autoScrapeEnabled').checked = settings.enabled;

        if (settings.nextScrape && settings.enabled) {
          document.getElementById('nextScrape').value = new Date(settings.nextScrape).toLocaleString('id-ID');
        } else {
          document.getElementById('nextScrape').value = 'Tidak terjadwal';
        }

        if (settings.lastAutoScrape) {
          const lastData = settings.lastAutoScrape;
          let statusIcon = lastData.status === 'completed' ? 'check-circle-fill text-success' : 'x-circle-fill text-danger';
          let statusText = lastData.status === 'completed' ? 'Selesai' : 'Gagal';
          let messageDetails = '';
          if (lastData.message) {
            if (lastData.status === 'completed') {
              const countsMatch = lastData.message.match(/Baru disimpan: (\d+), Diperbarui: (\d+), Tidak berubah: (\d+), Error: (\d+)/);
              if (countsMatch) {
                messageDetails = `(Disimpan: ${countsMatch[1]}, Diperbarui: ${countsMatch[2]}, Tidak berubah: ${countsMatch[3]}, Error: ${countsMatch[4]})`;
              } else {
                messageDetails = `(${lastData.message})`;
              }
            } else {
              messageDetails = `<span class="text-danger">(${lastData.message})</span>`;
            }
          }

          lastAutoScrapeInfoDiv.innerHTML = `
            <p class="mb-1">
              <i class="bi bi-calendar-event me-1"></i>
              <strong>Waktu Selesai:</strong> ${new Date(lastData.endTime).toLocaleString('id-ID', { dateStyle: 'medium', timeStyle: 'short' })}
            </p>
            <p class="mb-0">
              <i class="bi bi-${statusIcon} me-1"></i>
              <strong>Status:</strong> ${statusText} ${messageDetails}
            </p>
          `;
        } else {
          lastAutoScrapeInfoDiv.innerHTML = 'Belum ada riwayat scrape otomatis.';
        }

        updateAutoScrapeStatusButton(settings.enabled);

      } catch (error) {
        console.error('Failed to fetch auto scrape settings:', error);
        lastAutoScrapeInfoDiv.innerHTML = '<span class="text-muted">Informasi tidak tersedia.</span>';
      }

      const autoScrapeModal = new bootstrap.Modal(document.getElementById('autoScrapeModal'));
      autoScrapeModal.show();
    });

    document.getElementById('saveAutoScrape').addEventListener('click', async function() {
      const spinner = document.getElementById('autoScrapeSpinner');
      const button = this;
      const modal = bootstrap.Modal.getInstance(document.getElementById('autoScrapeModal'));
      const wantsToEnable = document.getElementById('autoScrapeEnabled').checked;

      if (wantsToEnable) {
        const googleMapsUrl = "<%= googleMapsUrl %>";
        if (!googleMapsUrl) {
          alert("URL Google Maps belum dikonfigurasi. Silakan atur URL terlebih dahulu sebelum mengaktifkan scrape otomatis.");
          return;
        }
      }

      try {
        button.disabled = true;
        spinner.classList.remove('d-none');

        const formData = {
          enabled: document.getElementById('autoScrapeEnabled').checked
        };

        const response = await fetch('/reviews/auto-scrape-settings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (response.ok) {
          updateAutoScrapeStatusButton(formData.enabled);
          if (result.settings && result.settings.nextScrape && formData.enabled) {
            document.getElementById('nextScrape').value = new Date(result.settings.nextScrape).toLocaleString('id-ID');
          } else {
            document.getElementById('nextScrape').value = 'Tidak terjadwal';
          }
          modal.hide();
        } else {
          alert(result.message || 'Gagal menyimpan pengaturan');
        }

      } catch (error) {
        console.error('Failed to save auto scrape settings:', error);
        alert('Terjadi kesalahan saat menyimpan pengaturan');
      } finally {
        button.disabled = false;
        spinner.classList.add('d-none');
      }
    });

    loadAutoScrapeStatus();
  }

  // Mengambil status scrape otomatis dari server
  async function loadAutoScrapeStatus() {
    try {
      const response = await fetch('/reviews/auto-scrape-settings');
      const settings = await response.json();
      updateAutoScrapeStatusButton(settings.enabled);
    } catch (error) {
      console.error('Failed to load auto scrape status:', error);
    }
  }

  // Update tombol status scrape otomatis di UI
  function updateAutoScrapeStatusButton(enabled) {
    const button = document.getElementById('autoScrapeButton');
    const status = document.getElementById('autoScrapeStatus');

    if (enabled) {
      button.classList.remove('btn-outline-primary');
      button.classList.add('btn-outline-success');
      status.textContent = 'Scrape Otomatis: Nyala';
    } else {
      button.classList.remove('btn-outline-success');
      button.classList.add('btn-outline-primary');
      status.textContent = 'Scrape Otomatis: Mati';
    }
  }

  // Setup modal pengaturan Google Maps URL
  function setupGoogleMapsSettings() {
    const urlInput = document.getElementById('google_maps_url');
    const saveButton = document.getElementById('saveGoogleMapsUrl');
    const originalUrl = urlInput.value;

    saveButton.disabled = true;

    document.getElementById('googleMapsButton').addEventListener('click', function() {
      const googleMapsModal = new bootstrap.Modal(document.getElementById('googleMapsModal'));
      document.getElementById('google_maps_url').value = "<%= googleMapsUrl %>";
      googleMapsModal.show();
    });

    urlInput.addEventListener('input', function() {
      validateGoogleMapsUrl(this);

      saveButton.disabled = this.value.trim() === "<%= googleMapsUrl %>";
    });

    document.getElementById('saveGoogleMapsUrl').addEventListener('click', async function() {
      const spinner = document.getElementById('googleMapsSpinner');
      const button = this;
      const modal = bootstrap.Modal.getInstance(document.getElementById('googleMapsModal'));

      if (!validateGoogleMapsUrl(urlInput)) {
        return;
      }

      const currentUrl = "<%= googleMapsUrl %>";
      const newUrl = urlInput.value;

      if (currentUrl && currentUrl !== newUrl) {
        const placeNameMatch = newUrl.match(/\/place\/([^/@]+)/);
        const placeName = placeNameMatch ? decodeURIComponent(placeNameMatch[1].replace(/\+/g, ' ')) : 'new location';

        if (!confirm(`WARNING: Changing the Google Maps URL to "${placeName}" will delete ALL existing reviews. Are you sure you want to continue?`)) {
          return;
        }
      }

      try {
        button.disabled = true;
        spinner.classList.remove('d-none');

        const response = await fetch('/reviews/google-maps-url', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            google_maps_url: newUrl
          })
        });

        const result = await response.json();

        if (response.ok) {
          // Muat ulang halaman otomatis
          window.location.href = window.location.pathname;
          return;
        } else {
          showModalError(result.message || 'Failed to update URL');
        }

      } catch (error) {
        console.error('Failed to save Google Maps URL:', error);
        showModalError('Error saving settings. Please try again.');
      } finally {
        button.disabled = false;
        spinner.classList.add('d-none');
      }
    });

    const googleMapsModal = document.getElementById('googleMapsModal');
    googleMapsModal.addEventListener('hidden.bs.modal', function() {
      urlInput.classList.remove('is-invalid', 'is-valid');
      const feedback = urlInput.nextElementSibling;
      if (feedback && (feedback.classList.contains('invalid-feedback') || feedback.classList.contains('valid-feedback'))) {
        feedback.remove();
      }

      // Reset to the server value, not the original captured value
      urlInput.value = "<%= googleMapsUrl %>";

      saveButton.disabled = true;

      const errorAlert = document.querySelector('#googleMapsForm .alert-danger');
      if (errorAlert) {
        errorAlert.remove();
      }
    });
  }

  // Validasi format URL Google Maps
  function validateGoogleMapsUrl(input) {
    const value = input.value.trim();
    let errorMessage = '';

    input.classList.remove('is-invalid', 'is-valid');
    const existingFeedback = input.nextElementSibling;
    if (existingFeedback && existingFeedback.classList.contains('invalid-feedback')) {
      existingFeedback.remove();
    }

    if (!value) {
      errorMessage = 'Google Maps URL is required';
    } else {
      try {
        const url = new URL(value);

        if (!url.hostname.includes('google.com') || !url.pathname.includes('/maps')) {
          errorMessage = 'The URL must be from Google Maps (google.com/maps)';
        } else if (!url.pathname.includes('/place/') || !value.includes('!1b1')) {
          errorMessage = 'The URL must be a Google Maps place with reviews section open';
        }
      } catch (e) {
        errorMessage = 'Invalid URL format';
      }
    }

    if (errorMessage) {
      input.classList.add('is-invalid');

      const feedback = document.createElement('div');
      feedback.className = 'invalid-feedback';
      feedback.textContent = errorMessage;
      input.parentNode.appendChild(feedback);

      return false;
    } else {
      input.classList.add('is-valid');
      return true;
    }
  }

  // Menampilkan pesan error dalam modal
  function showModalError(message, type = 'danger') {
    const modalBody = document.querySelector('#googleMapsForm .modal-body');
    const existingAlert = modalBody.querySelector('.alert');
    if (existingAlert) {
      existingAlert.remove();
    }

    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} mt-3`;
    alertDiv.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i>${message}`;
    modalBody.prepend(alertDiv);
  }

  // Setup modal untuk analisis file ulasan eksternal
  function setupFileAnalyzer() {
    window.fileAnalyzerModal = new bootstrap.Modal(document.getElementById('fileAnalyzerModal'));
    window.loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));

    document.getElementById('fileAnalyzerButton').addEventListener('click', () => window.fileAnalyzerModal.show());

    document.getElementById('uploadButton').addEventListener('click', handleFileUpload);

    const fileInput = document.getElementById('fileInput');
    fileInput.addEventListener('change', () => validateFileInput(fileInput));

    document.getElementById('fileAnalyzerModal').addEventListener('hidden.bs.modal', () => {
      resetFileAnalyzerForm();
    });
  }

  // Reset form analisis file
  function resetFileAnalyzerForm() {
    const fileInput = document.getElementById('fileInput');
    fileInput.classList.remove('is-invalid', 'is-valid');
    fileInput.value = '';

    const alertContainer = document.getElementById('fileAnalyzerAlert');
    alertContainer.innerHTML = '';
    alertContainer.classList.add('d-none');
  }

  // Validasi file yang diunggah
  function validateFileInput(input) {
    input.classList.remove('is-invalid', 'is-valid');

    if (input.files.length === 0) {
      input.classList.add('is-invalid');
      return false;
    }

    const file = input.files[0];
    const fileName = file.name.toLowerCase();
    const validExtensions = ['.csv', '.xlsx'];
    const isValidType = validExtensions.some(ext => fileName.endsWith(ext));

    if (!isValidType) {
      input.classList.add('is-invalid');
      return false;
    }

    input.classList.add('is-valid');
    return true;
  }

  // Handler untuk proses upload file
  async function handleFileUpload() {
    const fileInput = document.getElementById('fileInput');
    const uploadButton = document.getElementById('uploadButton');
    const spinner = document.getElementById('uploadSpinner');
    const alertContainer = document.getElementById('fileAnalyzerAlert');

    alertContainer.innerHTML = '';
    alertContainer.classList.add('d-none');

    if (!validateFileInput(fileInput)) {
      return;
    }

    try {
      uploadButton.disabled = true;
      spinner.classList.remove('d-none');

      const formData = new FormData();
      formData.append('file', fileInput.files[0]);

      const res = await fetch('/reviews/analyze/upload', {
        method: 'POST',
        body: formData
      });

      const result = await res.json();

      if (!res.ok) throw new Error(result.error || 'Unggah gagal');

      window.fileData = {
        fileId: result.fileId,
        originalFilename: result.originalFilename
      };

      showDataPreview(result);

    } catch (err) {
      showAlertInContainer(alertContainer, err.message, 'danger');
    } finally {
      uploadButton.disabled = false;
      spinner.classList.add('d-none');
    }
  }

  // Menampilkan pesan alert dalam container
  function showAlertInContainer(container, message, type) {
    container.innerHTML = `
      <div class="alert alert-${type} alert-dismissible fade show">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Tutup"></button>
      </div>`;
    container.classList.remove('d-none');
  }

  // Menampilkan preview data file yang diunggah
  function showDataPreview(result) {
    const modalBody = document.getElementById('fileAnalyzerModalBody');
    modalBody.innerHTML = `
      <div class="mb-4 bg-light p-3 rounded border">
        <div class="row g-3">
          <div class="col-md-7">
            <h6 class="mb-1">Pilih Kolom Teks</h6>
            <p class="small text-muted mb-2">Pilih kolom mana yang berisi teks ulasan untuk dianalisis</p>
            <select id="columnSelect" class="form-select">
              <option value="" disabled selected>Pilih kolom...</option>
              ${result.columns.map(col => `<option value="${col}">${col}</option>`).join('')}
            </select>
          </div>
          <div class="col-md-5">
            <div class="card h-100">
              <div class="card-body p-3">
                <h6 class="card-title border-bottom pb-2">Informasi File</h6>
                <p class="small mb-1"><strong>File:</strong> ${result.originalFilename || 'Tidak diketahui'}</p>
                <p class="small mb-1"><strong>Kolom:</strong> ${result.columns.length}</p>
                <p class="small mb-1"><strong>Baris:</strong> ${result.totalRows}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="table-responsive border rounded" style="max-height: min(400px, 50vh);">
        <table class="table table-hover table-sm mb-0">
          <thead class="table-light sticky-top">
            <tr>${result.columns.map(col => `<th class="px-2">${col}</th>`).join('')}</tr>
          </thead>
          <tbody>
            ${result.preview.map(row => `
              <tr>
                ${result.columns.map(col => `<td class="px-2">${truncateText(row[col] || '')}</td>`).join('')}
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>`;

    const modalFooter = document.querySelector('#fileAnalyzerModal .modal-footer');
    modalFooter.innerHTML = `
      <button type="button" id="backButton" class="btn btn-outline-secondary">
        <i class="bi bi-arrow-left me-1"></i>Kembali
      </button>
      <button id="processButton" class="btn btn-success" disabled>
        <i class="bi bi-lightning-charge me-1"></i>
        <span class="spinner-border spinner-border-sm d-none me-2" id="processSpinner"></span>
        Analisis Kolom Terpilih
      </button>`;

    document.getElementById('backButton').addEventListener('click', () => {
      window.fileAnalyzerModal.hide();
      setTimeout(resetFileAnalyzerModal, 300);
    });

    document.getElementById('columnSelect').addEventListener('change', function() {
      document.getElementById('processButton').disabled = !this.value;
    });

    document.getElementById('processButton').addEventListener('click', processSelectedColumn);
  }

  // Reset modal analisis file ke kondisi awal
  function resetFileAnalyzerModal() {
    document.getElementById('fileAnalyzerModalBody').innerHTML = `
      <form id="uploadForm" enctype="multipart/form-data">
        <div class="mb-3">
          <h6>Instruksi</h6>
          <p>Unggah file data ulasan Anda untuk analisis sentimen. Pastikan file berisi kolom dengan teks ulasan.</p>
          <div class="alert alert-info py-2">
            <div class="d-flex align-items-center">
              <i class="bi bi-info-circle me-2"></i>
              <small>Format yang didukung: CSV (.csv), Excel (.xlsx)</small>
            </div>
          </div>
          <div class="alert alert-warning py-2">
            <div class="d-flex align-items-center">
              <i class="bi bi-exclamation-triangle me-2"></i>
              <small><strong>Perhatian:</strong> File yang dianalisis tidak akan tersimpan di database. Hasil analisis akan tersedia untuk diunduh.</small>
            </div>
          </div>
        </div>

        <div class="mb-3">
          <label for="fileInput" class="form-label">Pilih File</label>
          <input class="form-control" type="file" id="fileInput" name="file" accept=".csv,.xlsx">
        </div>
      </form>`;

    document.querySelector('#fileAnalyzerModal .modal-footer').innerHTML = `
      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
      <button type="button" id="uploadButton" class="btn btn-primary">
        <i class="bi bi-cloud-arrow-up me-1"></i>
        <span class="spinner-border spinner-border-sm d-none me-2" id="uploadSpinner"></span>
        Unggah dan Pratinjau
      </button>`;

    document.getElementById('uploadButton').addEventListener('click', handleFileUpload);
  }

  // Memproses kolom terpilih untuk analisis sentimen
  async function processSelectedColumn() {
    const button = document.getElementById('processButton');
    const spinner = document.getElementById('processSpinner');
    const selectedCol = document.getElementById('columnSelect').value;

    if (!selectedCol || !window.fileData) {
      showAlert('Silakan pilih kolom terlebih dahulu', 'warning');
      return;
    }

    try {
      showLoadingModal(true);
      window.fileAnalyzerModal.hide();

      button.disabled = true;
      spinner.classList.remove('d-none');

      const res = await fetch('/reviews/analyze/process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          fileId: window.fileData.fileId,
          column: selectedCol
        })
      });

      const result = await res.json();

      if (!res.ok) throw new Error(result.error || 'Analisis gagal');

      window.loadingModal.hide();

      showAnalysisResults(result);
    } catch (err) {
      showLoadingError(err.message);
    } finally {
      button.disabled = false;
      spinner.classList.add('d-none');
    }
  }

  // Menampilkan modal loading selama proses analisis
  function showLoadingModal(isLoading) {
    document.getElementById('loadingState').classList.toggle('d-none', !isLoading);
    document.getElementById('errorState').classList.add('d-none');
    window.loadingModal.show();
  }

  // Menampilkan error saat proses loading
  function showLoadingError(message) {
    document.getElementById('loadingState').classList.add('d-none');
    document.getElementById('errorState').classList.remove('d-none');
    document.getElementById('errorAlert').textContent = message;
  }

  // Menampilkan hasil analisis sentimen
  function showAnalysisResults(result) {
    const modalId = 'resultsModal';
    let modal = document.getElementById(modalId);

    if (!modal) {
      modal = document.createElement('div');
      modal.className = 'modal fade';
      modal.id = modalId;
      modal.setAttribute('aria-hidden', 'true');
      modal.innerHTML = createResultsModalContent();
      document.body.appendChild(modal);
    }

    const resultModalInstance = new bootstrap.Modal(modal);
    resultModalInstance.show();

    document.getElementById('downloadResults').addEventListener('click', () => {
      downloadFile(result.file, result.filename);
    });

    modal.addEventListener('hidden.bs.modal', () => {
      window.fileData = null;
    });
  }

  // Membuat konten modal hasil analisis
  function createResultsModalContent() {
    return `
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Hasil Analisis</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
          </div>
          <div class="modal-body text-center">
            <div class="alert alert-success">
              <i class="bi bi-check-circle-fill me-2"></i>
              <span class="fw-bold">Analisis Selesai!</span>
            </div>
            
            <div class="py-3">
              <div class="mb-3 d-inline-block p-3 bg-success bg-opacity-10 rounded-circle">
                <i class="bi bi-check-circle-fill text-success fs-1"></i>
              </div>
              <h5 class="mb-3">File Anda telah diproses</h5>
              <p class="text-muted">Analisis sentimen selesai dan siap diunduh</p>
            </div>
          </div>
          <div class="modal-footer justify-content-center">
            <button id="downloadResults" class="btn btn-primary px-4">
              <i class="bi bi-download me-2"></i>Unduh Hasil
            </button>
            <button class="btn btn-outline-secondary px-4" data-bs-dismiss="modal">
              <i class="bi bi-x me-2"></i>Tutup
            </button>
          </div>
        </div>
      </div>`;
  }

  // Fungsi untuk mengunduh file hasil analisis
  function downloadFile(base64Data, filename) {
    const a = document.createElement('a');
    a.href = `data:application/octet-stream;base64,${base64Data}`;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }

  // Fungsi untuk memotong teks yang terlalu panjang
  function truncateText(text, maxLength = 100) {
    if (typeof text !== 'string') return text;
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  }

  // Menampilkan pesan alert
  function showAlert(message, type) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Tutup"></button>
    `;

    const container = document.querySelector('.container.content');
    container.prepend(alert);

    setTimeout(() => {
      alert.classList.remove('show');
      setTimeout(() => alert.remove(), 150);
    }, 5000);
  }
</script>