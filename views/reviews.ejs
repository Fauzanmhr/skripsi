<%- include('partials/header', { title: title, page: page }) %>

<div class="flex-wrapper">

  <!-- Auto Scrape Settings Modal -->
  <div class="modal fade" id="autoScrapeModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Pengaturan Scrape Otomatis</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
        </div>
        <div class="modal-body">
          <form id="autoScrapeForm" class="row g-3">
            <div class="col-12">
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="autoScrapeEnabled" name="enabled">
                <label class="form-check-label" for="autoScrapeEnabled">Aktifkan Scrape Otomatis</label>
              </div>
            </div>

            <div class="col-12">
              <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                Jika diaktifkan, ulasan akan otomatis diambil setiap hari tengah malam.
              </div>
            </div>
            
            <div class="col-12">
              <label for="nextScrape" class="form-label">Scrape Terjadwal Berikutnya</label>
              <input type="text" class="form-control" id="nextScrape" readonly disabled>
            </div>

            <!-- Last Auto Scrape Info Section -->
            <div class="col-12 mt-3 border-top pt-3">
              <h6 class="mb-2">Informasi Scrape Otomatis Terakhir</h6>
              <div id="lastAutoScrapeInfo" class="small text-muted">
                <span class="placeholder-glow"><span class="placeholder col-6"></span></span>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
          <button type="button" id="saveAutoScrape" class="btn btn-primary">
            <span class="spinner-border spinner-border-sm d-none" id="autoScrapeSpinner"></span>
            Simpan Pengaturan
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Google Maps URL Settings Modal -->
  <div class="modal fade" id="googleMapsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Pengaturan URL Google Maps</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
        </div>
        <div class="modal-body">
          <form id="googleMapsForm" class="row g-3">
            <div class="col-12">
              <label for="google_maps_url" class="form-label">Google Maps URL</label>
              <div class="input-group">
                <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                <input type="url" class="form-control" id="google_maps_url" name="google_maps_url" 
                     value="<%= googleMapsUrl %>" required>
              </div>
              <div class="form-text">
                URL Google Maps untuk pengambilan ulasan. Harus berupa halaman lokasi Google Maps dengan tab ulasan terbuka.
              </div>
            </div>
            
            <div class="col-12 mt-2">
              <details>
                <summary class="text-primary small cursor-pointer">Bagaimana cara mendapatkan URL yang valid?</summary>
                <div class="mt-2 small">
                  <ol>
                    <li>Buka Google Maps dan cari tempat yang ingin Anda pantau</li>
                    <li>Klik tab "Ulasan"</li>
                    <li>Salin URL dari address bar browser Anda</li>
                  </ol>
                  <p>URL yang valid biasanya terlihat seperti ini:</p>
                  <code class="bg-light d-block p-2 small text-break">https://www.google.com/maps/place/de.u+Coffee/.../@-6.8959,107.616,15z/...!1b1!...</code>
                  <p class="mt-2">Pastikan URL mengandung <code>/place/</code> dan juga <code>!1b1</code> yang menandakan tab ulasan sudah terbuka.</p>
                </div>
              </details>
            </div>
            
            <div class="col-12 mt-3">
              <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong>Perhatian:</strong> Mengubah URL Google Maps akan menghapus SEMUA data ulasan yang ada. 
                Pastikan Anda yakin sebelum menyimpan perubahan.
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
          <button type="button" id="saveGoogleMapsUrl" class="btn btn-primary">
            <span class="spinner-border spinner-border-sm d-none me-2" id="googleMapsSpinner"></span>
            Simpan Pengaturan
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="container content">
    <div class="mt-4 mb-4">
      <div class="d-flex justify-content-between align-items-center mb-3">
          <h2 class="fw-bold mb-0"></h2>
        <div class="d-flex gap-2">
          <button id="googleMapsButton" class="btn btn-outline-secondary d-flex align-items-center">
            <i class="bi bi-geo-alt me-2"></i>
            <span>Pengaturan Google Maps</span>
          </button>
          <button id="autoScrapeButton" class="btn btn-outline-primary d-flex align-items-center">
            <i class="bi bi-clock-history me-2"></i>
            <span id="autoScrapeStatus">Scrape Otomatis</span>
          </button>
          <button id="crawlButton" class="btn btn-primary d-flex align-items-center">
            <span class="spinner-border spinner-border-sm me-2 d-none" role="status" aria-hidden="true" id="crawlSpinner"></span>
            <span id="crawlButtonText">Scrape Ulasan Google Maps</span>
          </button>
        </div>
      </div>

      <!-- Display notice if Google Maps URL is not configured -->
      <% if (!googleMapsUrl) { %>
      <div class="alert alert-warning mb-4" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        <strong>URL Google Maps belum dikonfigurasi!</strong> Silakan atur URL di tombol Pengaturan Google Maps.
      </div>
      <% } %>

      <!-- Last Scrape Info Row -->
      <div id="lastScrapeInfoRow" class="d-flex flex-wrap justify-content-start align-items-center gap-3 small text-muted pt-2" style="min-height: 2.5em;">
      </div>

    </div>

    <div class="card shadow-sm mb-5">
      <div class="card-header py-3 d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
          <h5 class="mb-0">Daftar Ulasan</h5>
          <% if (placeName) { %>
            <span class="badge bg-primary ms-2">
              <i class="bi bi-geo-alt-fill me-1"></i> <%= placeName %>
            </span>
          <% } %>
        </div>
      </div>
      <div class="card-header bg-light py-3">
        <form id="filterForm" class="row g-2 align-items-center justify-content-center" method="GET">
          <input type="hidden" name="page" value="1">
          <div class="col-12 col-sm-auto">
            <div class="input-group input-group-sm">
              <span class="input-group-text">Sentimen</span>
              <select name="sentiment" class="form-select" aria-label="Filter berdasarkan sentimen">
                <option value="">Semua Sentimen</option>
                <% filterOptions.sentiments.forEach(sentiment => { %>
                  <option value="<%= sentiment %>" <%= filters.sentiment === sentiment ? 'selected' : '' %>><%= sentiment %></option>
                <% }); %>
                <option value="pending" <%= filters.sentiment === 'pending' ? 'selected' : '' %>>Sedang Diproses</option>
              </select>
            </div>
          </div>
          <div class="col-12 col-sm-auto">
            <div class="input-group input-group-sm">
              <span class="input-group-text">Dari</span>
              <input type="date" name="startDate" class="form-control" value="<%= filters.startDate || '' %>" aria-label="Tanggal mulai">
            </div>
          </div>
          <div class="col-12 col-sm-auto">
            <div class="input-group input-group-sm">
              <span class="input-group-text">Hingga</span>
              <input type="date" name="endDate" class="form-control" value="<%= filters.endDate || '' %>" aria-label="Tanggal akhir">
            </div>
          </div>
          <% if (filters.sentiment || filters.startDate || filters.endDate) { %>
          <div class="col-auto">
            <a href="/reviews" class="btn btn-sm btn-secondary">Reset</a>
          </div>
          <% } %>
          <div class="col-12 col-sm-auto">
            <button id="exportButton" class="btn btn-sm btn-success d-flex align-items-center">
              <i class="bi bi-file-earmark-excel me-2"></i>
              <span class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true" id="exportSpinner"></span>
              Ekspor
            </button>
          </div>
        </form>
      </div>

      <div class="card-body p-4">
        <div class="table-responsive" style="height: 450px; overflow-y: auto;"> <!-- Reduced height -->
          <table class="table table-hover text-center table-striped">
            <thead class="table-light sticky-top">
              <tr>
                <th>Tanggal</th>
                <th class="text-start w-50">Ulasan</th>
                <th>Sentimen</th>
              </tr>
            </thead>
            <tbody>
              <% if (reviews.length === 0) { %>
                <tr>
                  <td colspan="3" class="text-center text-muted">Tidak ada ulasan ditemukan</td>
                </tr>
              <% } else { %>
                <% reviews.forEach(review => { %>
                  <tr>
                    <td><%= new Date(review.time_published).toLocaleDateString('id-ID') %></td>
                    <td class="text-start text-wrap"><%= review.review %></td>
                    <td>
                      <% if (!review.sentiment) { %>
                        <span class="badge rounded-pill bg-warning text-dark">Sedang Diproses</span>
                      <% } else { %>
                        <span class="badge rounded-pill" id="badge-<%= review.id %>"><%= review.sentiment %></span>
                      <% } %>
                    </td>
                  </tr>
                <% }); %>
              <% } %>
            </tbody>
          </table>
        </div>
        
        <% if (pagination.totalPages > 1) { %>
          <nav class="mt-4">
            <ul class="pagination flex-wrap justify-content-center">
              <li class="page-item <%= pagination.page === 1 ? 'disabled' : '' %>">
                <a class="page-link" href="<%= getPageUrl(pagination.page - 1) %>">&laquo;</a>
              </li>
              <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                <% if (i === 1 || i === pagination.totalPages || (i >= pagination.page - 2 && i <= pagination.page + 2)) { %>
                  <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                    <a class="page-link" href="<%= getPageUrl(i) %>"><%= i %></a>
                  </li>
                <% } else if (i === 2 || i === pagination.totalPages - 1) { %>
                  <li class="page-item disabled">
                    <a class="page-link">...</a>
                  </li>
                <% } %>
              <% } %>
              <li class="page-item <%= pagination.page === pagination.totalPages ? 'disabled' : '' %>">
                <a class="page-link" href="<%= getPageUrl(pagination.page + 1) %>">&raquo;</a>
              </li>
            </ul>
          </nav>
        <% } %>
        
        <p class="text-center mt-3 text-muted">
          Menampilkan <%= (pagination.page - 1) * pagination.limit + 1 %> - 
          <%= Math.min(pagination.page * pagination.limit, pagination.totalCount) %> 
          dari <%= pagination.totalCount %> ulasan
          <% if (filters.sentiment === 'pending' || (filters.sentiment && filters.sentiment !== 'pending') || filters.startDate || filters.endDate) { %>
            (Difilter:
            <% if (filters.sentiment === 'pending') { %>Sedang Diproses<% } else if (filters.sentiment) { %>Sentimen: <%= filters.sentiment %><% } %>
            <% if ((filters.sentiment === 'pending' || (filters.sentiment && filters.sentiment !== 'pending')) && (filters.startDate || filters.endDate)) { %>, <% } %>
            <% if (filters.startDate || filters.endDate) { %>Tanggal: <%= filters.startDate ? new Date(filters.startDate).toLocaleDateString('id-ID') : 'Kapan saja' %> hingga <%= filters.endDate ? new Date(filters.endDate).toLocaleDateString('id-ID') : 'Terbaru' %><% } %>)
          <% } %>
        </p>
      </div>
    </div>
  </div>
</div>

<%- include('./partials/footer') %>

<!-- Scripts -->
<script>
  // Color mapping
  const badgeColors = {
    'positif': '#2E7D32', 
    'negatif': '#B71C1C',
    'netral': '#424242',
    'puas': '#0D47A1',
    'kecewa': '#E65100'
  };

  // Store initial status data passed from server
  const initialLatestScrapeStatus = <%- JSON.stringify(latestScrapeStatus || null) %>;

  let pollingIntervalId = null; // Variable to hold the interval ID
  const POLLING_INTERVAL_MS = 1000; // Poll every 1 second

  document.addEventListener('DOMContentLoaded', function() {
    // Apply colors to sentiment badges
    applySentimentBadgeColors();
    
    // Set up crawl button
    setupCrawlButton();
    
    // Handle filter
    setupFilterHandlers();
    
    // Set up export button
    setupExportButton();
    
    // Set up auto scrape button
    setupAutoScrape();

    // Set up Google Maps URL settings button
    setupGoogleMapsSettings();

    // Configure Google Maps button in warning alert
    const configureBtn = document.getElementById('configureGoogleMapsBtn');
    if (configureBtn) {
      configureBtn.addEventListener('click', function() {
        const googleMapsModal = new bootstrap.Modal(document.getElementById('googleMapsModal'));
        googleMapsModal.show();
      });
    }

    // Initial render of the scrape status row and button
    updateScrapeStatusRow(initialLatestScrapeStatus);
    updateCrawlButtonState(initialLatestScrapeStatus);

    // --- Start AJAX Polling ---
    startPolling();
  });
  
  function applySentimentBadgeColors() {
    document.querySelectorAll('.badge').forEach(badge => {
      const sentiment = badge.textContent.trim().toLowerCase();
      if (badgeColors[sentiment]) {
        badge.style.backgroundColor = badgeColors[sentiment];
      }
    });
  }
  
  function setupCrawlButton() {
    document.getElementById('crawlButton').addEventListener('click', async function() {
      // Check if Google Maps URL is configured
      const googleMapsUrl = "<%= googleMapsUrl %>";
      if (!googleMapsUrl) {
        const shouldConfigure = confirm("URL Google Maps belum dikonfigurasi. Apakah Anda ingin mengkonfigurasinya sekarang?");
        if (shouldConfigure) {
          const googleMapsModal = new bootstrap.Modal(document.getElementById('googleMapsModal'));
          googleMapsModal.show();
        }
        return;
      }
      
      await performCrawl(this, 'crawlSpinner', 'crawlButtonText', '/reviews/crawl');
    });
  }
  
  function setupExportButton() {
    document.getElementById('exportButton').addEventListener('click', async function() {
      const spinner = document.getElementById('exportSpinner');
      const button = this;
      
      try {
        // Show loading state
        button.disabled = true;
        spinner.classList.remove('d-none');
        
        // Get current filters from the filter form
        const currentFilters = new URLSearchParams(new FormData(document.getElementById('filterForm'))).toString();
        
        // Trigger download using current filters
        window.location.href = `/reviews/export?${currentFilters}`;
        
      } catch (error) {
        console.error('Export failed:', error);
        alert('Ekspor gagal. Silakan coba lagi.');
      } finally {
        setTimeout(() => {
          button.disabled = false;
          spinner.classList.add('d-none');
        }, 1000);
      }
    });
  }
  
  function setupFilterHandlers() {
    const filterSelects = document.querySelectorAll('#filterForm select');
    const filterDates = document.querySelectorAll('#filterForm input[type="date"]');
    
    // Handle select changes
    filterSelects.forEach(select => {
      select.addEventListener('change', function() {
        document.getElementById('filterForm').submit();
      });
    });
    
    // Handle date changes
    filterDates.forEach(dateInput => {
      dateInput.addEventListener('change', function() {
        document.getElementById('filterForm').submit();
      });
    });
  }
  
  async function performCrawl(button, spinnerId, buttonTextId, endpoint) {
    const spinner = document.getElementById(spinnerId);
    const buttonText = document.getElementById(buttonTextId);

    // Immediately disable button for feedback
    button.disabled = true;
    spinner.classList.remove('d-none');
    buttonText.textContent = 'Sedang Scrape...';

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      const result = await response.json();

      if (response.ok) {
        console.log("Crawl request successful:", result.message);
        // UI update (running status, completion, failure) will be handled by the next polling interval.
      } else {
        // REQUEST FAILED (e.g., 409 Conflict, 500)
        console.error("Scrape request failed:", result.message || 'Unknown error');
        alert(`Error: ${result.message || 'Terjadi kesalahan saat memulai scrape'}`);
        // Manually update button state as polling might not reflect this immediate failure correctly
        updateCrawlButtonState({ status: 'idle' }); // Reset button
      }
    } catch (error) {
      // NETWORK/FETCH ERROR
      console.error('Crawl operation fetch failed:', error);
      // Update UI locally as the request didn't reach the server
      updateScrapeStatusRow({
          type: 'manual',
          status: 'failed',
          startTime: new Date(),
          endTime: new Date(),
          message: `Fetch error: ${error.message}`
      });
      updateCrawlButtonState({ status: 'failed' }); // Reset button
      alert('Gagal menghubungi server untuk memulai scrape. Periksa koneksi Anda.');
    }
  }

  // Function to update the scrape status row display
  function updateScrapeStatusRow(statusData) {
    const row = document.getElementById('lastScrapeInfoRow');
    if (!row) return; // Exit if row element not found

    if (!statusData) {
      row.innerHTML = `
        <span>
          <i class="bi bi-info-circle me-1"></i>
          <strong>Scrape Terakhir:</strong> Belum ada data.
        </span>`;
      return;
    }

    let content = `
      <span>
        <i class="bi bi-info-circle me-1"></i>
        <strong>Scrape ${statusData.status === 'running' ? 'Sedang Berjalan' : 'Terakhir'}:</strong>
      </span>`;

    if (statusData.startTime) {
      content += `
        <span>
          <i class="bi bi-calendar-play me-1"></i>
          ${new Date(statusData.startTime).toLocaleString('id-ID', { dateStyle: 'short', timeStyle: 'short' })}
        </span>`;
    }

    content += `
      <span>
        <i class="bi bi-${statusData.type === 'auto' ? 'robot' : 'person'} me-1"></i>
        ${statusData.type === 'auto' ? 'Otomatis' : 'Manual'}
      </span>`;

    let statusIcon = 'question-circle';
    let statusText = 'Unknown';
    let statusColorClass = 'text-muted';

    switch (statusData.status) {
      case 'running':
        statusIcon = 'hourglass-split';
        statusText = 'Sedang Berjalan...';
        statusColorClass = 'text-primary';
        break;
      case 'completed':
        statusIcon = 'check-circle-fill';
        statusText = 'Selesai';
        statusColorClass = 'text-success';
        break;
      case 'failed':
        statusIcon = 'x-circle-fill';
        statusText = 'Gagal';
        statusColorClass = 'text-danger';
        break;
    }

    content += `
      <span class="${statusColorClass}">
        <i class="bi bi-${statusIcon} me-1"></i>
        ${statusText}
      </span>`;

    // Add message details
    if (statusData.message) {
       if (statusData.status === 'completed') {
           const countsMatch = statusData.message.match(/Baru disimpan: (\d+), Diperbarui: (\d+), Tidak berubah: (\d+), Error: (\d+)/);
           if (countsMatch) {
               content += `<span>(Disimpan: ${countsMatch[1]}, Diperbarui: ${countsMatch[2]}, Tidak berubah: ${countsMatch[3]}, Error: ${countsMatch[4]})</span>`;
           } else {
               content += `<span>(${statusData.message})</span>`;
           }
       } else if (statusData.status === 'failed') {
           const errorDetail = statusData.message.split(': ').slice(1).join(': ') || 'Lihat log server';
           content += `<span class="text-danger">(Error: ${errorDetail})</span>`;
       }
    }

    row.innerHTML = content;
  }

  // --- Function to update the crawl button state ---
  function updateCrawlButtonState(statusData) {
      const button = document.getElementById('crawlButton');
      const spinner = document.getElementById('crawlSpinner');
      const buttonText = document.getElementById('crawlButtonText');
      if (!button || !spinner || !buttonText) return;

      // Disable button if *any* scrape is running
      const isAnyScrapeRunning = statusData && statusData.status === 'running';

      if (isAnyScrapeRunning) {
          button.disabled = true;
          spinner.classList.remove('d-none');
          buttonText.textContent = 'Sedang Scrape...';
      } else {
          button.disabled = false;
          spinner.classList.add('d-none');
          buttonText.textContent = 'Scrape Ulasan Google Maps'; // Reset text
      }
  }

  // --- AJAX Polling Functions ---
  async function fetchLatestStatus() {
    try {
      const response = await fetch('/reviews/latest-status');
      if (!response.ok) {
        console.error('Polling failed:', response.statusText);
        return;
      }
      const statusData = await response.json();
      updateScrapeStatusRow(statusData);
      updateCrawlButtonState(statusData);
    } catch (error) {
      console.error('Error during status polling:', error);
    }
  }

  function startPolling() {
    if (pollingIntervalId) {
      clearInterval(pollingIntervalId);
    }
    console.log(`Starting AJAX polling every ${POLLING_INTERVAL_MS}ms`);
    fetchLatestStatus();
    pollingIntervalId = setInterval(fetchLatestStatus, POLLING_INTERVAL_MS);
  }

  function setupAutoScrape() {
    document.getElementById('autoScrapeButton').addEventListener('click', async function() {
      const lastAutoScrapeInfoDiv = document.getElementById('lastAutoScrapeInfo');
      lastAutoScrapeInfoDiv.innerHTML = '<span class="placeholder-glow"><span class="placeholder col-6"></span></span>';

      try {
        const response = await fetch('/reviews/auto-scrape-settings');
        const settings = await response.json();

        document.getElementById('autoScrapeEnabled').checked = settings.enabled;

        if (settings.nextScrape && settings.enabled) {
          document.getElementById('nextScrape').value = new Date(settings.nextScrape).toLocaleString('id-ID');
        } else {
          document.getElementById('nextScrape').value = 'Tidak terjadwal';
        }

        if (settings.lastAutoScrape) {
          const lastData = settings.lastAutoScrape;
          let statusIcon = lastData.status === 'completed' ? 'check-circle-fill text-success' : 'x-circle-fill text-danger';
          let statusText = lastData.status === 'completed' ? 'Selesai' : 'Gagal';
          let messageDetails = '';
          if (lastData.message) {
            if (lastData.status === 'completed') {
              const countsMatch = lastData.message.match(/Baru disimpan: (\d+), Diperbarui: (\d+), Tidak berubah: (\d+), Error: (\d+)/);
              if (countsMatch) {
                messageDetails = `(Disimpan: ${countsMatch[1]}, Diperbarui: ${countsMatch[2]}, Tidak berubah: ${countsMatch[3]}, Error: ${countsMatch[4]})`;
              } else {
                messageDetails = `(${lastData.message})`;
              }
            } else {
               const errorDetail = lastData.message.split(': ').slice(1).join(': ') || 'Lihat log server';
               messageDetails = `<span class="text-danger">(Error: ${errorDetail})</span>`;
            }
          }

          lastAutoScrapeInfoDiv.innerHTML = `
            <p class="mb-1">
              <i class="bi bi-calendar-event me-1"></i>
              <strong>Waktu Selesai:</strong> ${new Date(lastData.endTime).toLocaleString('id-ID', { dateStyle: 'medium', timeStyle: 'short' })}
            </p>
            <p class="mb-0">
              <i class="bi bi-${statusIcon} me-1"></i>
              <strong>Status:</strong> ${statusText} ${messageDetails}
            </p>
          `;
        } else {
          lastAutoScrapeInfoDiv.innerHTML = 'Belum ada riwayat scrape otomatis.';
        }

        updateAutoScrapeStatusButton(settings.enabled);

      } catch (error) {
        console.error('Failed to fetch auto scrape settings:', error);
        lastAutoScrapeInfoDiv.innerHTML = '<span class="text-danger">Gagal memuat informasi scrape terakhir.</span>';
        alert('Gagal memuat pengaturan scrape otomatis.');
      }

      const autoScrapeModal = new bootstrap.Modal(document.getElementById('autoScrapeModal'));
      autoScrapeModal.show();
    });

    document.getElementById('saveAutoScrape').addEventListener('click', async function() {
      // Add validation for Google Maps URL before allowing auto scrape activation
      const spinner = document.getElementById('autoScrapeSpinner');
      const button = this;
      const modal = bootstrap.Modal.getInstance(document.getElementById('autoScrapeModal'));
      const wantsToEnable = document.getElementById('autoScrapeEnabled').checked;
      
      // Only validate if trying to enable auto scrape
      if (wantsToEnable) {
        // Check if Google Maps URL is configured
        const googleMapsUrl = "<%= googleMapsUrl %>";
        if (!googleMapsUrl) {
          alert("URL Google Maps belum dikonfigurasi. Silakan atur URL terlebih dahulu sebelum mengaktifkan scrape otomatis.");
          return;
        }
      }
      
      try {
        button.disabled = true;
        spinner.classList.remove('d-none');
        
        const formData = {
          enabled: document.getElementById('autoScrapeEnabled').checked
        };
        
        const response = await fetch('/reviews/auto-scrape-settings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        
        if (response.ok) {
          updateAutoScrapeStatusButton(formData.enabled);
          if (result.settings && result.settings.nextScrape && formData.enabled) {
            document.getElementById('nextScrape').value = new Date(result.settings.nextScrape).toLocaleString('id-ID');
          } else {
            document.getElementById('nextScrape').value = 'Tidak terjadwal';
          }
          modal.hide();
        } else {
          alert(result.message || 'Gagal menyimpan pengaturan');
        }
        
      } catch (error) {
        console.error('Failed to save auto scrape settings:', error);
        alert('Terjadi kesalahan saat menyimpan pengaturan');
      } finally {
        button.disabled = false;
        spinner.classList.add('d-none');
      }
    });

    loadAutoScrapeStatus();
  }
  
  async function loadAutoScrapeStatus() {
    try {
      const response = await fetch('/reviews/auto-scrape-settings');
      const settings = await response.json();
      updateAutoScrapeStatusButton(settings.enabled);
    } catch (error) {
      console.error('Failed to load auto scrape status:', error);
    }
  }
  
  function updateAutoScrapeStatusButton(enabled) {
    const button = document.getElementById('autoScrapeButton');
    const status = document.getElementById('autoScrapeStatus');
    
    if (enabled) {
      button.classList.remove('btn-outline-primary');
      button.classList.add('btn-outline-success');
      status.textContent = 'Scrape Otomatis: Nyala';
    } else {
      button.classList.remove('btn-outline-success');
      button.classList.add('btn-outline-primary');
      status.textContent = 'Scrape Otomatis: Mati';
    }
  }

  function setupGoogleMapsSettings() {
    // Get elements
    const urlInput = document.getElementById('google_maps_url');
    const saveButton = document.getElementById('saveGoogleMapsUrl');
    const originalUrl = urlInput.value;
    
    // Initially disable save button if no changes made
    saveButton.disabled = true;
    
    // Open the modal
    document.getElementById('googleMapsButton').addEventListener('click', function() {
      const googleMapsModal = new bootstrap.Modal(document.getElementById('googleMapsModal'));
      googleMapsModal.show();
    });
    
    // Handle input changes to enable/disable button
    urlInput.addEventListener('input', function() {
      validateGoogleMapsUrl(this);
      
      // Enable save button only if text has changed from original
      saveButton.disabled = this.value.trim() === originalUrl;
    });
    
    // Save settings
    document.getElementById('saveGoogleMapsUrl').addEventListener('click', async function() {
      const spinner = document.getElementById('googleMapsSpinner');
      const button = this;
      const modal = bootstrap.Modal.getInstance(document.getElementById('googleMapsModal'));
      
      // Validate URL first
      if (!validateGoogleMapsUrl(urlInput)) {
        return;
      }
      
      // Get current and new URL
      const currentUrl = "<%= googleMapsUrl %>";
      const newUrl = urlInput.value;
      
      // Check if URL is changing
      if (currentUrl && currentUrl !== newUrl) {
        // Extract place name from new URL for better warning message
        const placeNameMatch = newUrl.match(/\/place\/([^/@]+)/);
        const placeName = placeNameMatch ? decodeURIComponent(placeNameMatch[1].replace(/\+/g, ' ')) : 'new location';
        
        // Confirm before proceeding with URL change
        if (!confirm(`WARNING: Changing the Google Maps URL to "${placeName}" will delete ALL existing reviews. Are you sure you want to continue?`)) {
          return;
        }
      }
      
      try {
        button.disabled = true;
        spinner.classList.remove('d-none');
        
        const response = await fetch('/reviews/google-maps-url', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ google_maps_url: newUrl })
        });
        
        const result = await response.json();
        
        if (response.ok) {
          modal.hide();
          
          // Show success message with appropriate text
          if (result.dataDeleted) {
            showModalError('Google Maps URL updated and all existing data has been deleted.', 'warning');
            // Reload page after a brief delay
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showModalError('Google Maps URL updated successfully.', 'success');
          }
        } else {
          // Show error inside modal
          showModalError(result.message || 'Failed to update URL');
        }
        
      } catch (error) {
        console.error('Failed to save Google Maps URL:', error);
        showModalError('Error saving settings. Please try again.');
      } finally {
        button.disabled = false;
        spinner.classList.add('d-none');
      }
    });

    // Reset form and button state when modal is hidden
    const googleMapsModal = document.getElementById('googleMapsModal');
    googleMapsModal.addEventListener('hidden.bs.modal', function() {
      // Reset validation state
      urlInput.classList.remove('is-invalid', 'is-valid');
      const feedback = urlInput.nextElementSibling;
      if (feedback && (feedback.classList.contains('invalid-feedback') || feedback.classList.contains('valid-feedback'))) {
        feedback.remove();
      }
      
      // Reset URL value to original
      urlInput.value = originalUrl;
      
      // Reset save button
      saveButton.disabled = true;
      
      // Remove any error messages
      const errorAlert = document.querySelector('#googleMapsForm .alert-danger');
      if (errorAlert) {
        errorAlert.remove();
      }
    });
  }
  
  function validateGoogleMapsUrl(input) {
    const value = input.value.trim();
    let errorMessage = '';
    
    // Remove existing validation feedback
    input.classList.remove('is-invalid', 'is-valid');
    const existingFeedback = input.nextElementSibling;
    if (existingFeedback && existingFeedback.classList.contains('invalid-feedback')) {
      existingFeedback.remove();
    }
    
    // Check if empty
    if (!value) {
      errorMessage = 'Google Maps URL is required';
    } 
    // Check if valid URL
    else {
      try {
        const url = new URL(value);
        
        // Check if Google Maps URL
        if (!url.hostname.includes('google.com') || !url.pathname.includes('/maps')) {
          errorMessage = 'The URL must be from Google Maps (google.com/maps)';
        }
        // Check if it has place with reviews
        else if (!url.pathname.includes('/place/') || !value.includes('!1b1')) {
          errorMessage = 'The URL must be a Google Maps place with reviews section open';
        }
      } catch (e) {
        errorMessage = 'Invalid URL format';
      }
    }
    
    // Show validation feedback
    if (errorMessage) {
      input.classList.add('is-invalid');
      
      // Add feedback message
      const feedback = document.createElement('div');
      feedback.className = 'invalid-feedback';
      feedback.textContent = errorMessage;
      input.parentNode.appendChild(feedback);
      
      return false;
    } else {
      input.classList.add('is-valid');
      return true;
    }
  }
  
  function showModalError(message) {
    const existingAlert = document.querySelector('#googleMapsForm .alert-danger');
    if (existingAlert) {
      existingAlert.remove();
    }
    
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-danger mt-3';
    alertDiv.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i>${message}`;
    document.getElementById('googleMapsForm').prepend(alertDiv);
  }
</script>