<%- include('partials/header') %>
<div class="flex-wrapper">
  <!-- Loading Modal (only for processing state) -->
  <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body text-center py-4">
          <div id="loadingState">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <h5 class="mt-3">Processing your file...</h5>
            <p>Please wait while we analyze the reviews.</p>
            <div class="progress mt-3" style="height: 6px;">
              <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
            </div>
          </div>
          <div id="errorState" class="d-none">
            <div class="alert alert-danger" id="errorAlert" role="alert"></div>
            <button class="btn btn-primary mt-3" id="closeModalButton" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="container content py-3">
    <div class="row justify-content-center">
      <div class="col-12 col-xl-10">
        <!-- Main card with responsive sizing -->
        <div class="card shadow-sm mb-5">
          <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
              <h5 class="mb-0">Customer Review File Analysis</h5>
            </div>
          </div>
          <div class="card-body p-3 p-md-4">
            <form id="uploadForm" enctype="multipart/form-data">
              <div class="mb-4">
                <h6>Instructions</h6>
                <p>Upload your review data file for sentiment analysis. Ensure it contains a column with review text.</p>
                <div class="alert alert-info py-2">
                  <div class="d-flex align-items-center">
                    <i class="bi bi-info-circle me-2"></i>
                    <small>Supported formats: CSV (.csv), Excel (.xlsx)</small>
                  </div>
                </div>
              </div>

              <div class="mb-4">
                <label for="fileInput" class="form-label">Select File</label>
                <input class="form-control" type="file" id="fileInput" name="file" accept=".csv,.xlsx">
                <div class="form-text mt-1">Maximum file size: 10MB</div>
              </div>

              <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <button type="submit" id="uploadButton" class="btn btn-primary">
                  <i class="bi bi-cloud-arrow-up me-1"></i>
                  <span class="spinner-border spinner-border-sm d-none me-2" id="uploadSpinner"></span>
                  Upload and Preview
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('./partials/footer') %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    setupFileUpload();
    
    // Initialize modal for later use
    window.loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
  });

  function setupFileUpload() {
    const form = document.getElementById('uploadForm');
    form.addEventListener('submit', handleFileUpload);
  }

  async function handleFileUpload(e) {
    e.preventDefault();
    const fileInput = document.getElementById('fileInput');
    const uploadButton = document.getElementById('uploadButton');
    const spinner = document.getElementById('uploadSpinner');

    if (!fileInput.files.length) {
      showAlert('Please select a file first', 'danger');
      return;
    }

    // Prepare UI for upload
    uploadButton.disabled = true;
    spinner.classList.remove('d-none');

    try {
      const formData = new FormData();
      formData.append('file', fileInput.files[0]);

      const res = await fetch('/analyze/upload', { 
        method: 'POST', 
        body: formData 
      });
      
      const result = await res.json();
      
      if (!res.ok) throw new Error(result.error || 'Upload failed');
      
      window.fileData = {
        filename: result.filename,
        fileContent: JSON.stringify(result.fileContent),
        fileInput: fileInput
      };
      
      showDataPreview(result);
      
    } catch (err) {
      showAlert(err.message, 'danger');
    } finally {
      uploadButton.disabled = false;
      spinner.classList.add('d-none');
    }
  }

  function showDataPreview(result) {
    const uploadCard = document.getElementById('uploadCard') || document.querySelector('.card.shadow-sm');
    uploadCard.innerHTML = `
      <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Review Data Preview</h5>
          <button id="backButton" class="btn btn-sm btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i>Back
          </button>
        </div>
      </div>
      <div class="card-body p-3 p-md-4">
        <div class="mb-4 bg-light p-3 rounded border">
          <div class="row g-3">
            <div class="col-md-7">
              <h6 class="mb-1">Select Text Column</h6>
              <p class="small text-muted mb-2">Choose which column contains the review text to analyze</p>
              <select id="columnSelect" class="form-select">
                <option value="" disabled selected>Select column...</option>
                ${result.columns.map(col => `<option value="${col}">${col}</option>`).join('')}
              </select>
            </div>
            <div class="col-md-5">
              <div class="card h-100">
                <div class="card-body p-3">
                  <h6 class="card-title border-bottom pb-2">File Information</h6>
                  <p class="small mb-1"><strong>File:</strong> ${result.filename}</p>
                  <p class="small mb-1"><strong>Columns:</strong> ${result.columns.length}</p>
                  <p class="small mb-1"><strong>Rows:</strong> ${result.totalRows}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="table-responsive border rounded" style="max-height: min(500px, 60vh);">
          <table class="table table-hover table-sm mb-0">
            <thead class="table-light sticky-top">
              <tr>${result.columns.map(col => `<th class="px-2">${col}</th>`).join('')}</tr>
            </thead>
            <tbody>
              ${result.preview.map(row => `
                <tr>
                  ${result.columns.map(col => `<td class="px-2">${truncateText(row[col] || '')}</td>`).join('')}
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
          <button id="processButton" class="btn btn-success" disabled>
            <i class="bi bi-lightning-charge me-1"></i>
            <span class="spinner-border spinner-border-sm d-none me-2" id="processSpinner"></span>
            Analyze Selected Column
          </button>
        </div>
      </div>`;

    // Set up back button handler
    document.getElementById('backButton').addEventListener('click', function() {
      location.reload();
    });

    // Set up column selection handler
    document.getElementById('columnSelect').addEventListener('change', function() {
      document.getElementById('processButton').disabled = !this.value;
    });

    // Set up process button
    document.getElementById('processButton').addEventListener('click', processSelectedColumn);
  }

  async function processSelectedColumn() {
    const button = document.getElementById('processButton');
    const spinner = button.querySelector('#processSpinner');
    const selectedCol = document.getElementById('columnSelect').value;
    
    if (!selectedCol || !window.fileData) {
      showAlert('Please select a column first', 'warning');
      return;
    }

    // Show loading modal
    document.getElementById('loadingState').classList.remove('d-none');
    document.getElementById('errorState').classList.add('d-none');
    window.loadingModal.show();

    button.disabled = true;
    spinner.classList.remove('d-none');

    try {
      const res = await fetch('/analyze/process', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          filename: window.fileData.filename,
          column: selectedCol,
          fileContent: window.fileData.fileContent
        })
      });

      const result = await res.json();
      
      if (!res.ok) throw new Error(result.error || 'Analysis failed');

      // Hide modal and show results directly
      window.loadingModal.hide();
      showAnalysisResults(result);

    } catch (err) {
      document.getElementById('loadingState').classList.add('d-none');
      document.getElementById('errorState').classList.remove('d-none');
      document.getElementById('errorAlert').textContent = err.message;
    } finally {
      button.disabled = false;
      spinner.classList.add('d-none');
    }
  }

  function showAnalysisResults(result) {
    const uploadCard = document.querySelector('.card.shadow-sm');
    uploadCard.innerHTML = `
      <div class="card-header">
        <h5 class="mb-0">Analysis Results</h5>
      </div>
      <div class="card-body p-3 p-md-5 text-center">
        <div class="alert alert-success">
          <i class="bi bi-check-circle-fill me-2"></i>
          <span class="fw-bold">Analysis Complete!</span>
        </div>
        
        <div class="py-4">
          <div class="mb-3 d-inline-block p-3 bg-success bg-opacity-10 rounded-circle">
            <i class="bi bi-check-circle-fill text-success fs-1"></i>
          </div>
          <h4 class="mb-3">Your file has been processed</h4>
          <p class="text-muted">The sentiment analysis is complete and ready to download</p>
        </div>
        
        <div class="d-flex flex-column flex-md-row justify-content-center gap-3 mt-4">
          <button id="downloadResults" class="btn btn-primary px-4">
            <i class="bi bi-download me-2"></i>Download Results
          </button>
          <button id="newAnalysis" class="btn btn-outline-secondary px-4">
            <i class="bi bi-arrow-repeat me-2"></i>New Analysis
          </button>
        </div>
      </div>`;

    document.getElementById('downloadResults').addEventListener('click', () => {
      const a = document.createElement('a');
      a.href = `data:application/octet-stream;base64,${result.file}`;
      a.download = result.filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    });

    document.getElementById('newAnalysis').addEventListener('click', () => {
      location.reload();
    });
  }

  // Helper functions
  function truncateText(text, maxLength = 100) {
    if (typeof text !== 'string') return text;
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  }

  function showAlert(message, type) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    const container = document.querySelector('.container.content');
    container.prepend(alert);
    
    setTimeout(() => {
      alert.classList.remove('show');
      setTimeout(() => alert.remove(), 150);
    }, 5000);
  }
</script>